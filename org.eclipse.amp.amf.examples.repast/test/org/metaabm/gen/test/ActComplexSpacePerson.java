package org.metaabm.gen.test;

import org.apache.commons.collections15.Predicate;
import org.apache.commons.lang.RandomStringUtils;

import java.lang.Iterable;

import junit.framework.TestCase;

import repast.context.Context;

import repast.engine.schedule.ScheduledMethod;

import repast.parameter.Parameter;

import repast.query.AndQuery;
import repast.query.Query;
import repast.query.QueryUtils;
import repast.query.space.graph.NetPathWithin;

import repast.space.graph.Network;

import repast.util.ContextUtils;
import repast.util.collections.FilteredIterator;

/**
 * Act Complex Space Person Java Implementation.
 *
 *
 * Generated by metaabm system: Nov 1, 2007 5:24:24 PM PDT
 */
public class ActComplexSpacePerson extends TestCase {

    /**
     * Most recent version.
     */
    private static ActModel model;

    /**
     *
     */
    private boolean booleanResult;
    private String uniqueID;

    /**
     * Constructs a new Act Complex Space Person.
     */
    public ActComplexSpacePerson() {
        createUniqueID();
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 0)
    public void actComplexSpacePersonRule() {
        final Context context = ContextUtils.getContext(this);

        final Network testNetwork =
            (Network) context.getProjection("Test Network");

        Query<Object> not_SpaceNeighbor_Query = null;

        not_SpaceNeighbor_Query = new NetPathWithin(testNetwork, this, 1);

        Query<Object> not_SpaceNeighbor_QueryAgentClass =
            new Query<Object>() {
                public Iterable<Object> query() {
                    return new FilteredIterator<Object>(context.iterator(),
                        new Predicate() {
                            public boolean evaluate(Object object) {
                                return (object instanceof ActComplexSpacePerson);

                            }
                        });

                }

                public Iterable<Object> query(Iterable<Object> other) {
                    return new FilteredIterator<Object>(query().iterator(),
                        QueryUtils.createContains(other));
                }
            };

        not_SpaceNeighbor_Query = new AndQuery<Object>(not_SpaceNeighbor_Query,
                not_SpaceNeighbor_QueryAgentClass);

        if (!not_SpaceNeighbor_Query.query().iterator().hasNext()) {
            setBooleanResult(true);

        }
    }

    /**
     * Gets the Boolean Result property for Act Complex Space Person.
     * @return
     */
    @Parameter(displayName = "Boolean Result", usageName = "booleanResult", defaultValue = "")
    public boolean isBooleanResult() {
        return booleanResult;
    }

    /**
     * Sets the Boolean Result property for Act Complex Space Person.
     *
     * @param _booleanResult the new Boolean Result value
     */
    public void setBooleanResult(boolean _booleanResult) {
        booleanResult = _booleanResult;

    }

    /**
     * Gets the Act Model property for Named.
     * @return Most recent version.
     */
    public static ActModel getActModel() {
        return model;
    }

    /**
     * Sets the Act Model property for Named.
     * Most recent version.
     * @param _actModel the new Act Model value
     */
    public static void setActModel(ActModel _actModel) {
        model = _actModel;

    }

    public String getUID() {
        return uniqueID;
    }

    public String toString() {
        return "Act Complex Space Person " + uniqueID;
    }

    public void createUniqueID() {
        uniqueID = RandomStringUtils.randomAlphanumeric(5);
    }

    /**
     * Clones the agent, ensuring that a unique id is assigned.
     */
    public Object clone() {
        try {
            ActComplexSpacePerson clone = (ActComplexSpacePerson) super.clone();
            clone.createUniqueID();
            return clone;
        } catch (Exception e) {
            throw new RuntimeException("Unexpected cloning exception: " + e);
        }
    }
}
