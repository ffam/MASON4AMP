package org.metaabm.gen.test;

import org.apache.commons.collections15.Predicate;
import org.apache.commons.lang.RandomStringUtils;

import java.lang.Iterable;

import java.util.Iterator;

import junit.framework.TestCase;

import repast.context.Context;

import repast.engine.schedule.ScheduledMethod;

import repast.parameter.Parameter;

import repast.query.AndQuery;
import repast.query.Query;
import repast.query.QueryUtils;
import repast.query.space.graph.NetPathWithin;

import repast.space.graph.Network;
import repast.space.grid.Grid;

import repast.util.ContextUtils;
import repast.util.collections.FilteredIterator;

/**
 * Act Person Network Java Implementation.
 *
 *
 * Generated by metaabm system: Nov 1, 2007 5:24:24 PM PDT
 */
public class ActPersonNetwork extends TestCase {

    /**
     * Most recent version.
     */
    private static ActModel model;

    /**
     *
     */
    private int vision;

    /**
     *
     */
    private boolean movingTowardGoal = true;
    private String uniqueID;

    /**
     * Constructs a new Act Person Network.
     */
    public ActPersonNetwork() {
        createUniqueID();
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 6)
    public void simpleNetworkMoveTowardAgent() {
        final Context context = ContextUtils.getContext(this);

        final Network testNetwork =
            (Network) context.getProjection("Test Network");

        final Grid territory = (Grid) context.getProjection("Territory");

        Query<Object> spaceNeighborQuery = null;

        spaceNeighborQuery = new NetPathWithin(testNetwork, this, 1);

        Query<Object> spaceNeighborQueryAgentClass =
            new Query<Object>() {
                public Iterable<Object> query() {
                    return new FilteredIterator<Object>(context.iterator(),
                        new Predicate() {
                            public boolean evaluate(Object object) {
                                return (object instanceof ActPersonNetwork);

                            }
                        });

                }

                public Iterable<Object> query(Iterable<Object> other) {
                    return new FilteredIterator<Object>(query().iterator(),
                        QueryUtils.createContains(other));
                }
            };

        spaceNeighborQuery = new AndQuery<Object>(spaceNeighborQuery,
                spaceNeighborQueryAgentClass);

        Iterator spaceNeighborIter =
            spaceNeighborQuery.query(context.getRandomObjects(
                    ActPersonNetwork.class, context.size())).iterator();
        if (spaceNeighborIter.hasNext()) {
            final ActPersonNetwork person2 =
                (ActPersonNetwork) spaceNeighborIter.next();

            Query<Object> towardQuery = null;

            Query<Object> towardQueryAgentClass =
                new Query<Object>() {
                    public Iterable<Object> query() {
                        return new FilteredIterator<Object>(context.iterator(),
                            new Predicate() {
                                public boolean evaluate(Object object) {
                                    return (object instanceof Area);

                                }
                            });

                    }

                    public Iterable<Object> query(Iterable<Object> other) {
                        return new FilteredIterator<Object>(query().iterator(),
                            QueryUtils.createContains(other));
                    }
                };

            towardQuery = new AndQuery<Object>(towardQuery,
                    towardQueryAgentClass);

            Iterator towardIter =
                towardQuery.query(context.getRandomObjects(Area.class,
                        context.size())).iterator();
            if (towardIter.hasNext()) {
                final Area neighborGridLocation = (Area) towardIter.next();

                int[] movetoPerson2Loc =
                    territory.getLocation(neighborGridLocation).toIntArray(null);
                territory.moveTo(this, movetoPerson2Loc);

            }
        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 7)
    public void disconnect() {
        final Context context = ContextUtils.getContext(this);

        final Network testNetwork =
            (Network) context.getProjection("Test Network");

        Query<Object> spaceNeighborCopyQuery = null;

        spaceNeighborCopyQuery = new NetPathWithin(testNetwork, this, 1);

        Query<Object> spaceNeighborCopyQueryAgentClass =
            new Query<Object>() {
                public Iterable<Object> query() {
                    return new FilteredIterator<Object>(context.iterator(),
                        new Predicate() {
                            public boolean evaluate(Object object) {
                                return (object instanceof ActPersonNetwork);

                            }
                        });

                }

                public Iterable<Object> query(Iterable<Object> other) {
                    return new FilteredIterator<Object>(query().iterator(),
                        QueryUtils.createContains(other));
                }
            };

        spaceNeighborCopyQuery = new AndQuery<Object>(spaceNeighborCopyQuery,
                spaceNeighborCopyQueryAgentClass);

        Iterator spaceNeighborCopyIter =
            spaceNeighborCopyQuery.query(context.getRandomObjects(
                    ActPersonNetwork.class, context.size())).iterator();
        if (spaceNeighborCopyIter.hasNext()) {
            final ActPersonNetwork actPersonNetwork =
                (ActPersonNetwork) spaceNeighborCopyIter.next();

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 8)
    public void replace() {
        final Context context = ContextUtils.getContext(this);

        final Network testNetwork =
            (Network) context.getProjection("Test Network");

        Query<Object> spaceNeighborCopyCopyQuery = null;

        spaceNeighborCopyCopyQuery = new NetPathWithin(testNetwork, this, 1);

        Query<Object> spaceNeighborCopyCopyQueryAgentClass =
            new Query<Object>() {
                public Iterable<Object> query() {
                    return new FilteredIterator<Object>(context.iterator(),
                        new Predicate() {
                            public boolean evaluate(Object object) {
                                return (object instanceof ActPersonNetwork);

                            }
                        });

                }

                public Iterable<Object> query(Iterable<Object> other) {
                    return new FilteredIterator<Object>(query().iterator(),
                        QueryUtils.createContains(other));
                }
            };

        spaceNeighborCopyCopyQuery = new AndQuery<Object>(spaceNeighborCopyCopyQuery,
                spaceNeighborCopyCopyQueryAgentClass);

        Iterator spaceNeighborCopyCopyIter =
            spaceNeighborCopyCopyQuery.query(context.getRandomObjects(
                    ActPersonNetwork.class, context.size())).iterator();
        if (spaceNeighborCopyCopyIter.hasNext()) {
            final ActPersonNetwork actPersonNetworkCopy =
                (ActPersonNetwork) spaceNeighborCopyCopyIter.next();

        }
    }

    /**
     * Gets the Vision property for Act Person Network.
     * @return
     */
    @Parameter(displayName = "Vision", usageName = "vision", defaultValue = "")
    public int getVision() {
        return vision;
    }

    /**
     * Sets the Vision property for Act Person Network.
     *
     * @param _vision the new Vision value
     */
    public void setVision(int _vision) {
        vision = _vision;

    }

    /**
     * Gets the Moving Toward Goal property for Act Person Network.
     * @return
     */
    @Parameter(displayName = "Moving Toward Goal", usageName = "movingTowardGoal", defaultValue = "true")
    public boolean isMovingTowardGoal() {
        return movingTowardGoal;
    }

    /**
     * Sets the Moving Toward Goal property for Act Person Network.
     *
     * @param _movingTowardGoal the new Moving Toward Goal value
     */
    public void setMovingTowardGoal(boolean _movingTowardGoal) {
        movingTowardGoal = _movingTowardGoal;

    }

    /**
     * Gets the Act Model property for Named.
     * @return Most recent version.
     */
    public static ActModel getActModel() {
        return model;
    }

    /**
     * Sets the Act Model property for Named.
     * Most recent version.
     * @param _actModel the new Act Model value
     */
    public static void setActModel(ActModel _actModel) {
        model = _actModel;

    }

    public String getUID() {
        return uniqueID;
    }

    public String toString() {
        return "Act Person Network " + uniqueID;
    }

    public void createUniqueID() {
        uniqueID = RandomStringUtils.randomAlphanumeric(5);
    }

    /**
     * Clones the agent, ensuring that a unique id is assigned.
     */
    public Object clone() {
        try {
            ActPersonNetwork clone = (ActPersonNetwork) super.clone();
            clone.createUniqueID();
            return clone;
        } catch (Exception e) {
            throw new RuntimeException("Unexpected cloning exception: " + e);
        }
    }
}
