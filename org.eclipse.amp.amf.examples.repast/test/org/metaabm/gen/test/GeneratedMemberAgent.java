package org.metaabm.gen.test;

import org.apache.commons.lang.RandomStringUtils;

import junit.framework.TestCase;

import repast.context.Context;

import repast.engine.schedule.ScheduledMethod;

import repast.parameter.Parameter;

import repast.space.grid.Grid;

import repast.util.ContextUtils;

/**
 * Generated Member Agent Java Implementation.
 *
 *
 * Generated by metaabm system: Nov 1, 2007 5:24:34 PM PDT
 */
public class GeneratedMemberAgent extends TestCase {

    /**
     *
     */
    private static GeneratedModel model;

    /**
     *
     */
    private double float12 = 12.0;

    /**
     *
     */
    private double float20 = 20;

    /**
     *
     */
    private double float1p8 = 1.8;

    /**
     *
     */
    private boolean resultBoolean = false;

    /**
     *
     */
    private double floatResult1;

    /**
     *
     */
    private boolean complexResultCorrect = false;

    /**
     *
     */
    private int complexResultValue;

    /**
     *
     */
    private int constant3 = 3;

    /**
     *
     */
    private int countChanges = 0;

    /**
     *
     */
    private int temp1 = 1;

    /**
     *
     */
    private int int1 = 1;

    /**
     *
     */
    private int int2 = 2;

    /**
     *
     */
    private int int3 = 3;

    /**
     *
     */
    private int int4 = 4;

    /**
     *
     */
    private int int10 = 10;

    /**
     *
     */
    private boolean boolean1;

    /**
     *
     */
    private boolean boolean2;
    private String uniqueID;

    /**
     * Constructs a new Generated Member Agent.
     */
    public GeneratedMemberAgent() {
        createUniqueID();
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 0)
    public void testSimpleCondition() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        assertPreResultFalse();

        if (getFloat12() <= getFloat20()) {
            setFloat1p8(getFloat20());

            assert1p8Equals20();

            assert20Copy();

            if (getFloat1p8() == getFloat20()) {
                assert1p8Equals20();

                setFloat20(3);

                if (getFloat20() == 3) {
                    setFloatResult1(getInt10());

                    assert20Equal3();

                    assertResult1Equal10();

                }
            }
        }
    }

    /**
     * .
     */
    public void assert1p8Equals20() {
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 4)
    public void testSimpleConjunction() {
        final Context context = ContextUtils.getContext(this);

        if ((getFloat12() <= getFloat20() && getFloat20() > getFloat1p8())) {
            setResultBoolean(true);

        }
    }

    /**
     * .
     */
    public void assertTrue() {
    }

    /**
     * .
     */
    public void assertPreResultFalse() {
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 11)
    public void testSimpleMath() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        double valueFloat12MultiplyFloat1p8 = getFloat12() * getFloat1p8();

        setFloatResult1(valueFloat12MultiplyFloat1p8);

        assert21pt6();

    }

    /**
     * .
     */
    public void assert21pt6() {
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 15)
    public void testComplexMath() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        int valueInt10ModuloInt3 = getInt10() % getInt3();

        int valueInt10DivideInt3 = getInt10() / getInt3();

        int valueConstant3MultiplyValueInt10DivideInt3 =
            3 * valueInt10DivideInt3;

        int valueValueConstant3MultiplyValueInt10DivideInt3AddValueInt10ModuloInt3 =
            valueConstant3MultiplyValueInt10DivideInt3 + valueInt10ModuloInt3;

        setComplexResultValue(valueValueConstant3MultiplyValueInt10DivideInt3AddValueInt10ModuloInt3);

        assertComplexValue10();

        if (getInt10() == valueValueConstant3MultiplyValueInt10DivideInt3AddValueInt10ModuloInt3) {
            setComplexResultCorrect(true);

            assertComplexResultTrue();

        }
    }

    /**
     * .
     */
    public void assertComplexValue10() {
    }

    /**
     * .
     */
    public void assertComplexResultTrue() {
    }

    /**
     * .
     */
    public void assert20Copy() {
    }

    /**
     * .
     */
    public void assert20Equal3() {
    }

    /**
     * .
     */
    public void assertResult1Equal10() {
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 32)
    public void testSimpleOR() {
        final Context context = ContextUtils.getContext(this);

        if ((getFloat1p8() < getFloat20() || getFloat1p8() == getFloat20())) {
            int valueIncrementCountChanges = getCountChanges() + 1;

            setFloatResult1(3);

            setCountChanges(valueIncrementCountChanges);

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 40)
    public void testLiterals() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if (3 <= 4) {
            setFloatResult1(3);

            assertFloatResult3();

        }
    }

    /**
     * .
     */
    public void assertFloatResult3() {
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 44)
    public void testNegate() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if (isResultBoolean()) {
            setFloat12(getFloat20());

        }

        if (!(isResultBoolean())) {
            setFloat12(getFloat1p8());

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 49)
    public void testIdentity() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if (isResultBoolean()) {
            setFloat12(getFloat20());

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 52)
    public void testComplexNegate() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if ((!((getFloat20() >= getFloat12() && getInt3() == 3)) ||
              getFloat20() < getFloat12())) {
            setFloatResult1(getInt3());

        }

        if ((getFloat20() >= getFloat12() && getInt3() == 3)) {
            setFloatResult1(getInt2());

        }

        if (!((getFloat20() >= getFloat12() && getInt3() == 3))) {
            setFloatResult1(getInt1());

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 62)
    public void testComplexConjunction() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if ((true == isResultBoolean() || getInt1() == getFloatResult1() ||
              3 == getInt3() || getFloat12() == 12.0)) {
            setFloatResult1(getInt1());

        }

        if (((true == isResultBoolean() || getInt1() == getFloatResult1() ||
              3 == getInt3() || getFloat12() == 12.0) &&
              true == isResultBoolean())) {
            setFloatResult1(getInt2());

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 73)
    public void testExclusiveConjunctions() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if ((isBoolean1() && isBoolean2())) {
            setBoolean1(true);

            assertFloatResult1To12CopyCopy();

            assertFloatResult1To12();

        }

        if ((isBoolean2() && !isBoolean1())) {
            setResultBoolean(true);

            assertFloatResult1To12CopyCopyCopy();

        }

        if ((isBoolean1() && !isBoolean2())) {
            setBoolean2(true);

            assertFloatResult1To12Copy();

        }

        if ((!isBoolean1() && !isBoolean2())) {
            setFloatResult1(getFloat12());

            assertFloatResult1To12CopyCopyCopyCopy();

        }
    }

    /**
     * .
     */
    @ScheduledMethod(start = 1, interval = 1, priority = 86)
    public void testMultiplePaths() {
        final Context context = ContextUtils.getContext(this);

        final Grid grid2D = (Grid) context.getProjection("Grid 2D");

        if (getFloat20() <= getFloat12()) {
            setFloat1p8(getFloat20());

            setFloat1p8(getFloat12());

        }

        if (getFloat20() >= getFloat12()) {
            setFloat1p8(getFloat12());

        }
    }

    /**
     * .
     */
    public void assertFloatResult1To12() {
    }

    /**
     * .
     */
    public void assertFloatResult1To12Copy() {
    }

    /**
     * .
     */
    public void assertFloatResult1To12CopyCopy() {
    }

    /**
     * .
     */
    public void assertFloatResult1To12CopyCopyCopy() {
    }

    /**
     * .
     */
    public void assertFloatResult1To12CopyCopyCopyCopy() {
    }

    /**
     * Gets the Float 12 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Float 12", usageName = "float12", defaultValue = "12.0")
    public double getFloat12() {
        return float12;
    }

    /**
     * Sets the Float 12 property for Generated Member Agent.
     *
     * @param _float12 the new Float 12 value
     */
    public void setFloat12(double _float12) {
        float12 = _float12;

    }

    /**
     * Gets the Float 20 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Float 20", usageName = "float20", defaultValue = "20")
    public double getFloat20() {
        return float20;
    }

    /**
     * Sets the Float 20 property for Generated Member Agent.
     *
     * @param _float20 the new Float 20 value
     */
    public void setFloat20(double _float20) {
        float20 = _float20;

    }

    /**
     * Gets the Float 1p8 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Float 1p8", usageName = "float1p8", defaultValue = "1.8")
    public double getFloat1p8() {
        return float1p8;
    }

    /**
     * Sets the Float 1p8 property for Generated Member Agent.
     *
     * @param _float1p8 the new Float 1p8 value
     */
    public void setFloat1p8(double _float1p8) {
        float1p8 = _float1p8;

    }

    /**
     * Gets the Result Boolean property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Result Boolean", usageName = "resultBoolean", defaultValue = "false")
    public boolean isResultBoolean() {
        return resultBoolean;
    }

    /**
     * Sets the Result Boolean property for Generated Member Agent.
     *
     * @param _resultBoolean the new Result Boolean value
     */
    public void setResultBoolean(boolean _resultBoolean) {
        resultBoolean = _resultBoolean;

    }

    /**
     * Gets the Float Result 1 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Float Result 1", usageName = "floatResult1", defaultValue = "")
    public double getFloatResult1() {
        return floatResult1;
    }

    /**
     * Sets the Float Result 1 property for Generated Member Agent.
     *
     * @param _floatResult1 the new Float Result 1 value
     */
    public void setFloatResult1(double _floatResult1) {
        floatResult1 = _floatResult1;

    }

    /**
     * Gets the Complex Result Correct property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Complex Result Correct", usageName = "complexResultCorrect", defaultValue = "false")
    public boolean isComplexResultCorrect() {
        return complexResultCorrect;
    }

    /**
     * Sets the Complex Result Correct property for Generated Member Agent.
     *
     * @param _complexResultCorrect the new Complex Result Correct value
     */
    public void setComplexResultCorrect(boolean _complexResultCorrect) {
        complexResultCorrect = _complexResultCorrect;

    }

    /**
     * Gets the Complex Result Value property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Complex Result Value", usageName = "complexResultValue", defaultValue = "")
    public int getComplexResultValue() {
        return complexResultValue;
    }

    /**
     * Sets the Complex Result Value property for Generated Member Agent.
     *
     * @param _complexResultValue the new Complex Result Value value
     */
    public void setComplexResultValue(int _complexResultValue) {
        complexResultValue = _complexResultValue;

    }

    /**
     * Gets the Constant3 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Constant3", usageName = "constant3", defaultValue = "3")
    public int getConstant3() {
        return constant3;
    }

    /**
     * Sets the Constant3 property for Generated Member Agent.
     *
     * @param _constant3 the new Constant3 value
     */
    public void setConstant3(int _constant3) {
        constant3 = _constant3;

    }

    /**
     * Gets the Count Changes property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Count Changes", usageName = "countChanges", defaultValue = "0")
    public int getCountChanges() {
        return countChanges;
    }

    /**
     * Sets the Count Changes property for Generated Member Agent.
     *
     * @param _countChanges the new Count Changes value
     */
    public void setCountChanges(int _countChanges) {
        countChanges = _countChanges;

    }

    /**
     * Gets the Temp 1 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Temp 1", usageName = "temp1", defaultValue = "1")
    public int getTemp1() {
        return temp1;
    }

    /**
     * Sets the Temp 1 property for Generated Member Agent.
     *
     * @param _temp1 the new Temp 1 value
     */
    public void setTemp1(int _temp1) {
        temp1 = _temp1;

    }

    /**
     * Gets the Int 1 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Int 1", usageName = "int1", defaultValue = "1")
    public int getInt1() {
        return int1;
    }

    /**
     * Sets the Int 1 property for Generated Member Agent.
     *
     * @param _int1 the new Int 1 value
     */
    public void setInt1(int _int1) {
        int1 = _int1;

    }

    /**
     * Gets the Int 2 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Int 2", usageName = "int2", defaultValue = "2")
    public int getInt2() {
        return int2;
    }

    /**
     * Sets the Int 2 property for Generated Member Agent.
     *
     * @param _int2 the new Int 2 value
     */
    public void setInt2(int _int2) {
        int2 = _int2;

    }

    /**
     * Gets the Int 3 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Int 3", usageName = "int3", defaultValue = "3")
    public int getInt3() {
        return int3;
    }

    /**
     * Sets the Int 3 property for Generated Member Agent.
     *
     * @param _int3 the new Int 3 value
     */
    public void setInt3(int _int3) {
        int3 = _int3;

    }

    /**
     * Gets the Int 4 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Int 4", usageName = "int4", defaultValue = "4")
    public int getInt4() {
        return int4;
    }

    /**
     * Sets the Int 4 property for Generated Member Agent.
     *
     * @param _int4 the new Int 4 value
     */
    public void setInt4(int _int4) {
        int4 = _int4;

    }

    /**
     * Gets the Int 10 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Int 10", usageName = "int10", defaultValue = "10")
    public int getInt10() {
        return int10;
    }

    /**
     * Sets the Int 10 property for Generated Member Agent.
     *
     * @param _int10 the new Int 10 value
     */
    public void setInt10(int _int10) {
        int10 = _int10;

    }

    /**
     * Gets the Boolean 1 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Boolean 1", usageName = "boolean1", defaultValue = "")
    public boolean isBoolean1() {
        return boolean1;
    }

    /**
     * Sets the Boolean 1 property for Generated Member Agent.
     *
     * @param _boolean1 the new Boolean 1 value
     */
    public void setBoolean1(boolean _boolean1) {
        boolean1 = _boolean1;

    }

    /**
     * Gets the Boolean 2 property for Generated Member Agent.
     * @return
     */
    @Parameter(displayName = "Boolean 2", usageName = "boolean2", defaultValue = "")
    public boolean isBoolean2() {
        return boolean2;
    }

    /**
     * Sets the Boolean 2 property for Generated Member Agent.
     *
     * @param _boolean2 the new Boolean 2 value
     */
    public void setBoolean2(boolean _boolean2) {
        boolean2 = _boolean2;

    }

    /**
     * Gets the Generated Model property for Named.
     * @return
     */
    public static GeneratedModel getGeneratedModel() {
        return model;
    }

    /**
     * Sets the Generated Model property for Named.
     *
     * @param _generatedModel the new Generated Model value
     */
    public static void setGeneratedModel(GeneratedModel _generatedModel) {
        model = _generatedModel;

    }

    public String getUID() {
        return uniqueID;
    }

    public String toString() {
        return "Generated Member Agent " + uniqueID;
    }

    public void createUniqueID() {
        uniqueID = RandomStringUtils.randomAlphanumeric(5);
    }

    /**
     * Clones the agent, ensuring that a unique id is assigned.
     */
    public Object clone() {
        try {
            GeneratedMemberAgent clone = (GeneratedMemberAgent) super.clone();
            clone.createUniqueID();
            return clone;
        } catch (Exception e) {
            throw new RuntimeException("Unexpected cloning exception: " + e);
        }
    }
}
