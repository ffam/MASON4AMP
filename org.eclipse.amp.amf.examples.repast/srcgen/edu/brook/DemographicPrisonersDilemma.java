package edu.brook;

/**
 * Demographic Prisoner_s Dilemma Java Implementation.
 * 
 * Generated by metaabm system: Nov 2, 2009 8:54:42 PM PST in project: org.eclipse.amp.amf.examples.repast  */

public class DemographicPrisonersDilemma
		extends
			repast.simphony.context.DefaultContext
		implements
			repast.simphony.dataLoader.ContextBuilder {

	/**
	 * The number of players to create.
	 */

	private int playerCount = 100;
	/**
	 * 
	 */

	private int minimumWealth = 20;
	/**
	 * 
	 */

	private int maximumWealth = 100;
	/**
	 * 
	 */

	private int maximumAge = 100;
	/**
	 * The change in wealth for a player when playing cooperate against cooperate.
	 */

	private int payoffCC = 2;
	/**
	 * The change in wealth for a player when playing cooperate against defect.
	 */

	private int payoffCD = -6;
	/**
	 * The change in wealth for a player when playing defect against cooperate.
	 */

	private int payoffDC = 6;
	/**
	 * The change in wealth for a player when both players defect.
	 */

	private int payoffDD = -5;
	/**
	 * The wealth level at which an agent can fission.
	 */

	private int fissionWealth = 11;
	/**
	 * The wealth that is passed from parent to child.
	 */

	private int inheiritedWealth = 6;
	/**
	 * The wealth initially assigned to an agent at the beginning of model run.
	 */

	private int initialWealth = 6;
	/**
	 * The probabaility that a given agent will change strategies in a given period, expressed as a value from 0.0 to 1.0.
	 */

	private double mutationRate = .1;
	/**
	 * The number of periods before an agent will be removed from game when Die At Age rule is active.
	 */

	private int deathAge = 100;
	/**
	 * The actual age in years as determined by data set.
	 */

	private int birthAge = 0;
	/**
	 * The size of each dimension.
	 */

	private int[] gameSpaceDimensions = new int[2];
	/**
	 * 
	 */

	private repast.simphony.space.grid.Grid gameSpace = null;
	/**
	 * Constructs a new Demographic Prisoner_s Dilemma.
	 */

	public DemographicPrisonersDilemma() {
		createUniqueID();
		setGameSpaceWidth(20);
		setGameSpaceHeight(20);
	}

	repast.simphony.context.Context buildContext;

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		//uniqueID = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			DemographicPrisonersDilemma clone = (DemographicPrisonersDilemma) super
					.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	public repast.simphony.context.Context getContext() {
		return buildContext;
	}

	/**
	 * Builds and returns a context based on MetaABM generation for repast.simphony. Building a context consists of filling it with
	 * agents, adding projects and so forth. When this is called for the master context
	 * the system will pass in a created context based on information given in the
	 * model.score file. When called for subcontexts, each subcontext that was added
	 * when the master context was built will be passed in.
	 *
	 * @param context
	 * @return the built context.
	 */
	public repast.simphony.context.Context build(
			repast.simphony.context.Context context) {
		this.buildContext = context;

		Player createPlayers = null;
		for (int i = 0; i < getPlayerCount(); i++) {
			createPlayers = new Player();
			context.add(createPlayers);

			createPlayers.setDemographicPrisoner_sDilemma(this);

		}

		//Agents are never actually added automatically
		repast.simphony.space.grid.GridAdder buildGridAdder = new repast.simphony.space.grid.RandomGridAdder();
		repast.simphony.space.grid.GridBuilderParameters params = new repast.simphony.space.grid.GridBuilderParameters(
				new repast.simphony.space.grid.WrapAroundBorders(),
				buildGridAdder, true, gameSpaceDimensions);
		gameSpace = repast.simphony.context.space.grid.GridFactoryFinder
				.createGridFactory(null).createGrid("Game Space", context,
						params);

		repast.simphony.space.grid.GridDimensions dims = gameSpace
				.getDimensions();

		for (int d0 = 0; d0 < dims.getDimension(0); d0++) {

			for (int d1 = 0; d1 < dims.getDimension(1); d1++) {

				int[] nextLoc = {

				d0, d1};
				edu.brook.PlayCell playCell = new edu.brook.PlayCell();
				context.add(playCell);
				gameSpace.moveTo(playCell, nextLoc);

			}
		}

		return context;
	}

	/**
	 * Gets the Player Count property for Demographic Prisoner_s Dilemma.
	 * @return The number of players to create.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Player Count", usageName = "playerCount", defaultValue = "100")
	public int getPlayerCount() {
		return playerCount;
	}

	/**
	 * Sets the Player Count property for Demographic Prisoner_s Dilemma.
	 * The number of players to create.
	 * @param _playerCount the new Player Count value
	 */

	public void setPlayerCount(int _playerCount) {
		playerCount = _playerCount;
	}

	/**
	 * Gets the Minimum Wealth property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Minimum Wealth", usageName = "minimumWealth", defaultValue = "20")
	public int getMinimumWealth() {
		return minimumWealth;
	}

	/**
	 * Sets the Minimum Wealth property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _minimumWealth the new Minimum Wealth value
	 */

	public void setMinimumWealth(int _minimumWealth) {
		minimumWealth = _minimumWealth;
	}

	/**
	 * Gets the Maximum Wealth property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Maximum Wealth", usageName = "maximumWealth", defaultValue = "100")
	public int getMaximumWealth() {
		return maximumWealth;
	}

	/**
	 * Sets the Maximum Wealth property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _maximumWealth the new Maximum Wealth value
	 */

	public void setMaximumWealth(int _maximumWealth) {
		maximumWealth = _maximumWealth;
	}

	/**
	 * Gets the Maximum Age property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Maximum Age", usageName = "maximumAge", defaultValue = "100")
	public int getMaximumAge() {
		return maximumAge;
	}

	/**
	 * Sets the Maximum Age property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _maximumAge the new Maximum Age value
	 */

	public void setMaximumAge(int _maximumAge) {
		maximumAge = _maximumAge;
	}

	/**
	 * Gets the Payoff Cooperate Cooperate property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when playing cooperate against cooperate.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Payoff Cooperate Cooperate", usageName = "payoffCC", defaultValue = "2")
	public int getPayoffCC() {
		return payoffCC;
	}

	/**
	 * Sets the Payoff Cooperate Cooperate property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when playing cooperate against cooperate.
	 * @param _payoffCC the new Payoff Cooperate Cooperate value
	 */

	public void setPayoffCC(int _payoffCC) {
		payoffCC = _payoffCC;
	}

	/**
	 * Gets the Payoff Cooperate Defect property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when playing cooperate against defect.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Payoff Cooperate Defect", usageName = "payoffCD", defaultValue = "-6")
	public int getPayoffCD() {
		return payoffCD;
	}

	/**
	 * Sets the Payoff Cooperate Defect property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when playing cooperate against defect.
	 * @param _payoffCD the new Payoff Cooperate Defect value
	 */

	public void setPayoffCD(int _payoffCD) {
		payoffCD = _payoffCD;
	}

	/**
	 * Gets the Payoff Defect Cooperate property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when playing defect against cooperate.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Payoff Defect Cooperate", usageName = "payoffDC", defaultValue = "6")
	public int getPayoffDC() {
		return payoffDC;
	}

	/**
	 * Sets the Payoff Defect Cooperate property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when playing defect against cooperate.
	 * @param _payoffDC the new Payoff Defect Cooperate value
	 */

	public void setPayoffDC(int _payoffDC) {
		payoffDC = _payoffDC;
	}

	/**
	 * Gets the Payoff Defect Defect property for Demographic Prisoner_s Dilemma.
	 * @return The change in wealth for a player when both players defect.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Payoff Defect Defect", usageName = "payoffDD", defaultValue = "-5")
	public int getPayoffDD() {
		return payoffDD;
	}

	/**
	 * Sets the Payoff Defect Defect property for Demographic Prisoner_s Dilemma.
	 * The change in wealth for a player when both players defect.
	 * @param _payoffDD the new Payoff Defect Defect value
	 */

	public void setPayoffDD(int _payoffDD) {
		payoffDD = _payoffDD;
	}

	/**
	 * Gets the Fission Wealth property for Demographic Prisoner_s Dilemma.
	 * @return The wealth level at which an agent can fission.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Fission Wealth", usageName = "fissionWealth", defaultValue = "11")
	public int getFissionWealth() {
		return fissionWealth;
	}

	/**
	 * Sets the Fission Wealth property for Demographic Prisoner_s Dilemma.
	 * The wealth level at which an agent can fission.
	 * @param _fissionWealth the new Fission Wealth value
	 */

	public void setFissionWealth(int _fissionWealth) {
		fissionWealth = _fissionWealth;
	}

	/**
	 * Gets the Inheirited Wealth property for Demographic Prisoner_s Dilemma.
	 * @return The wealth that is passed from parent to child.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Inheirited Wealth", usageName = "inheiritedWealth", defaultValue = "6")
	public int getInheiritedWealth() {
		return inheiritedWealth;
	}

	/**
	 * Sets the Inheirited Wealth property for Demographic Prisoner_s Dilemma.
	 * The wealth that is passed from parent to child.
	 * @param _inheiritedWealth the new Inheirited Wealth value
	 */

	public void setInheiritedWealth(int _inheiritedWealth) {
		inheiritedWealth = _inheiritedWealth;
	}

	/**
	 * Gets the Initial Wealth property for Demographic Prisoner_s Dilemma.
	 * @return The wealth initially assigned to an agent at the beginning of model run.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Initial Wealth", usageName = "initialWealth", defaultValue = "6")
	public int getInitialWealth() {
		return initialWealth;
	}

	/**
	 * Sets the Initial Wealth property for Demographic Prisoner_s Dilemma.
	 * The wealth initially assigned to an agent at the beginning of model run.
	 * @param _initialWealth the new Initial Wealth value
	 */

	public void setInitialWealth(int _initialWealth) {
		initialWealth = _initialWealth;
	}

	/**
	 * Gets the Mutation Rate property for Demographic Prisoner_s Dilemma.
	 * @return The probabaility that a given agent will change strategies in a given period, expressed as a value from 0.0 to 1.0.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Mutation Rate", usageName = "mutationRate", defaultValue = ".1")
	public double getMutationRate() {
		return mutationRate;
	}

	/**
	 * Sets the Mutation Rate property for Demographic Prisoner_s Dilemma.
	 * The probabaility that a given agent will change strategies in a given period, expressed as a value from 0.0 to 1.0.
	 * @param _mutationRate the new Mutation Rate value
	 */

	public void setMutationRate(double _mutationRate) {
		mutationRate = _mutationRate;
	}

	/**
	 * Gets the Death Age property for Demographic Prisoner_s Dilemma.
	 * @return The number of periods before an agent will be removed from game when Die At Age rule is active.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Death Age", usageName = "deathAge", defaultValue = "100")
	public int getDeathAge() {
		return deathAge;
	}

	/**
	 * Sets the Death Age property for Demographic Prisoner_s Dilemma.
	 * The number of periods before an agent will be removed from game when Die At Age rule is active.
	 * @param _deathAge the new Death Age value
	 */

	public void setDeathAge(int _deathAge) {
		deathAge = _deathAge;
	}

	/**
	 * Gets the Birth Age property for Demographic Prisoner_s Dilemma.
	 * @return The actual age in years as determined by data set.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Birth Age", usageName = "birthAge", defaultValue = "0")
	public int getBirthAge() {
		return birthAge;
	}

	/**
	 * Sets the Birth Age property for Demographic Prisoner_s Dilemma.
	 * The actual age in years as determined by data set.
	 * @param _birthAge the new Birth Age value
	 */

	public void setBirthAge(int _birthAge) {
		birthAge = _birthAge;
	}

	/**
	 * Gets the Dimensions property for Game Space.
	 * @return The size of each dimension.
	 */

	public int[] getGameSpaceDimensions() {
		return gameSpaceDimensions;
	}

	/**
	 * Sets the Dimensions property for Game Space.
	 * The size of each dimension.
	 * @param _gameSpaceDimensions the new Dimensions value
	 */

	public void setGameSpaceDimensions(int[] _gameSpaceDimensions) {
		gameSpaceDimensions = _gameSpaceDimensions;
	}

	/**
	 * Gets the Width property for Game Space.
	 * @return The horizontal extent of the space.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Game Space Width", usageName = "gameSpaceWidth", defaultValue = "20")
	public int getGameSpaceWidth() {
		return gameSpaceDimensions[0];
	}

	/**
	 * Sets the Width property for Game Space.
	 * The horizontal extent of the space.
	 * @param _gameSpaceWidth the new Width value
	 */

	public void setGameSpaceWidth(int _gameSpaceWidth) {
		gameSpaceDimensions[0] = _gameSpaceWidth;
	}

	/**
	 * Gets the Height property for Game Space.
	 * @return The vertical extent of the space.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Game Space Height", usageName = "gameSpaceHeight", defaultValue = "20")
	public int getGameSpaceHeight() {
		return gameSpaceDimensions[1];
	}

	/**
	 * Sets the Height property for Game Space.
	 * The vertical extent of the space.
	 * @param _gameSpaceHeight the new Height value
	 */

	public void setGameSpaceHeight(int _gameSpaceHeight) {
		gameSpaceDimensions[1] = _gameSpaceHeight;
	}

	/**
	 * Gets the Game Space property for Demographic Prisoner_s Dilemma.
	 * @return 
	 */

	public repast.simphony.space.grid.Grid getGameSpace() {
		return gameSpace;
	}

	/**
	 * Sets the Game Space property for Demographic Prisoner_s Dilemma.
	 * 
	 * @param _gameSpace the new Game Space value
	 */

	public void setGameSpace(repast.simphony.space.grid.Grid _gameSpace) {
		gameSpace = _gameSpace;
	}

}
