package edu.brook;

/**
 * Player Java Implementation.
 * 
 * Generated by metaabm system: Nov 2, 2009 8:54:42 PM PST in project: org.eclipse.amp.amf.examples.repast  */

public class Player {

	/**
	 * 
	 */

	private boolean cooperate = false;
	/**
	 * 
	 */

	private int age = 0;
	/**
	 * 
	 */

	private int wealth = 0;
	/**
	 * Constructs a new Player.
	 */

	public Player() {
		createUniqueID();
	}

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		//uniqueID = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			Player clone = (Player) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * 
	 */

	private DemographicPrisonersDilemma demographicPrisoner_sDilemmaList = null;

	/**
	 * Gets the Demographic Prisoner_s Dilemma property for .
	 * @return 
	 */

	public DemographicPrisonersDilemma getDemographicPrisoner_sDilemma() {
		return demographicPrisoner_sDilemmaList;
	}

	/**
	 * Sets the Demographic Prisoner_s Dilemma property for .
	 * 
	 * @param _demographicPrisoner_sDilemma the new Demographic Prisoner_s Dilemma value
	 */

	public void setDemographicPrisoner_sDilemma(
			DemographicPrisonersDilemma _demographicPrisoner_sDilemma) {
		demographicPrisoner_sDilemmaList = _demographicPrisoner_sDilemma;
	}

	public double randomInRange(double minValue, double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(minValue,
				maxValue);
	}

	public double randomToLimit(double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(0.0,
				maxValue);
	}

	public int randomToLimit(int maxValue) {
		return repast.simphony.random.RandomHelper.nextIntFromTo(0, maxValue);
	}
	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 0, interval = 0, priority = -0)
	public void intializeNonFramework() {

		setWealth(getDemographicPrisoner_sDilemma().getInitialWealth());

		int randomToMaxAge = repast.simphony.random.RandomHelper.nextIntFromTo(
				0, getDemographicPrisoner_sDilemma().getMaximumAge());

		boolean randomStrategy = repast.simphony.random.RandomHelper
				.getUniform().nextBoolean();

		setAge(randomToMaxAge);

		setCooperate(randomStrategy);

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 0, interval = 0, priority = -1)
	public void moveToRandomLocation() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid gameSpace = (repast.simphony.space.grid.Grid) context
				.getProjection("Game Space");

		{

			repast.simphony.query.Query<Object> spaceAvailableQuery = null;

			repast.simphony.query.Query<Object> spaceAvailableQueryAvailable = new repast.simphony.query.Query<Object>() {
				public java.lang.Iterable<Object> query() {

					return new repast.simphony.util.collections.FilteredIterator<Object>(
							context.iterator(),
							new org.apache.commons.collections15.Predicate() {
								public boolean evaluate(Object object) {

									repast.simphony.space.grid.GridPoint location = gameSpace
											.getLocation(object);
									if (location != null) {
										java.util.Iterator locIter = gameSpace
												.getObjectsAt(
														location
																.toIntArray(null))
												.iterator();
										if (locIter.hasNext()) {
											locIter.next();
											if (!locIter.hasNext()) {
												return true;
											}
										}
									}
									return false;

								}
							});

				}
				public java.lang.Iterable<Object> query(
						java.lang.Iterable<Object> other) {
					return new repast.simphony.util.collections.FilteredIterator<Object>(
							query().iterator(),
							repast.simphony.query.QueryUtils
									.createContains(other));
				}
			};

			spaceAvailableQuery = spaceAvailableQueryAvailable;

			java.util.Iterator spaceAvailableIter = spaceAvailableQuery.query()
					.iterator();
			if (spaceAvailableIter.hasNext()) {
				java.util.List spaceAvailableList = org.apache.commons.collections15.IteratorUtils
						.toList(spaceAvailableIter);
				final PlayCell randomCell2 = (PlayCell) spaceAvailableList
						.get(repast.simphony.random.RandomHelper.nextIntFromTo(
								0, spaceAvailableList.size() - 1));

				int[] movetoPlayerinGameSpaceLoc = gameSpace.getLocation(
						randomCell2).toIntArray(null);
				gameSpace.moveTo(this, movetoPlayerinGameSpaceLoc);

			}
		}

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -8)
	public void randomWalk() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid gameSpace = (repast.simphony.space.grid.Grid) context
				.getProjection("Game Space");

		{

			repast.simphony.query.Query<Object> availableNeighborQuery = null;

			availableNeighborQuery = new repast.simphony.query.space.grid.VNQuery(
					gameSpace, this, 1, 1);

			repast.simphony.query.Query<Object> availableNeighborQueryAvailable = new repast.simphony.query.Query<Object>() {
				public java.lang.Iterable<Object> query() {

					return new repast.simphony.util.collections.FilteredIterator<Object>(
							context.iterator(),
							new org.apache.commons.collections15.Predicate() {
								public boolean evaluate(Object object) {

									repast.simphony.space.grid.GridPoint location = gameSpace
											.getLocation(object);
									if (location != null) {
										java.util.Iterator locIter = gameSpace
												.getObjectsAt(
														location
																.toIntArray(null))
												.iterator();
										if (locIter.hasNext()) {
											locIter.next();
											if (!locIter.hasNext()) {
												return true;
											}
										}
									}
									return false;

								}
							});

				}
				public java.lang.Iterable<Object> query(
						java.lang.Iterable<Object> other) {
					return new repast.simphony.util.collections.FilteredIterator<Object>(
							query().iterator(),
							repast.simphony.query.QueryUtils
									.createContains(other));
				}
			};

			availableNeighborQuery = new repast.simphony.query.AndQuery<Object>(
					availableNeighborQuery, availableNeighborQueryAvailable);

			java.util.Iterator availableNeighborIter = availableNeighborQuery
					.query().iterator();
			if (availableNeighborIter.hasNext()) {
				java.util.List availableNeighborList = org.apache.commons.collections15.IteratorUtils
						.toList(availableNeighborIter);
				final PlayCell randomNeighbor = (PlayCell) availableNeighborList
						.get(repast.simphony.random.RandomHelper.nextIntFromTo(
								0, availableNeighborList.size() - 1));

				int[] movetoDemographicPrisonnersDillemainGameSpaceLoc = gameSpace
						.getLocation(randomNeighbor).toIntArray(null);
				gameSpace.moveTo(this,
						movetoDemographicPrisonnersDillemainGameSpaceLoc);

			}
		}

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -9)
	public void playNeighbor() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid gameSpace = (repast.simphony.space.grid.Grid) context
				.getProjection("Game Space");

		{

			repast.simphony.query.Query<Object> spaceNeighborCopyQuery = null;

			spaceNeighborCopyQuery = new repast.simphony.query.space.grid.VNQuery(
					gameSpace, this, 1, 1);

			repast.simphony.query.Query<Object> spaceNeighborCopyQueryAgentClass = new repast.simphony.query.Query<Object>() {
				public java.lang.Iterable<Object> query() {

					return new repast.simphony.util.collections.FilteredIterator<Object>(
							context.iterator(),
							new org.apache.commons.collections15.Predicate() {
								public boolean evaluate(Object object) {

									return (object instanceof Player);

								}
							});

				}
				public java.lang.Iterable<Object> query(
						java.lang.Iterable<Object> other) {
					return new repast.simphony.util.collections.FilteredIterator<Object>(
							query().iterator(),
							repast.simphony.query.QueryUtils
									.createContains(other));
				}
			};

			spaceNeighborCopyQuery = new repast.simphony.query.AndQuery<Object>(
					spaceNeighborCopyQuery, spaceNeighborCopyQueryAgentClass);

			java.util.Iterator spaceNeighborCopyIter = spaceNeighborCopyQuery
					.query().iterator();
			if (spaceNeighborCopyIter.hasNext()) {
				java.util.List spaceNeighborCopyList = org.apache.commons.collections15.IteratorUtils
						.toList(spaceNeighborCopyIter);
				final Player otherPlayer = (Player) spaceNeighborCopyList
						.get(repast.simphony.random.RandomHelper.nextIntFromTo(
								0, spaceNeighborCopyList.size() - 1));

				if ((otherPlayer.isCooperate() && isCooperate())) {

					int valueWealthAddPayoffCooperateCooperate = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffCC();

					int valueWealthAddPayoffCooperateCooperateCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffCC();

					setWealth(valueWealthAddPayoffCooperateCooperate);

					otherPlayer
							.setWealth(valueWealthAddPayoffCooperateCooperateCopy);

				}

				if ((otherPlayer.isCooperate() && !isCooperate())) {

					int valueWealthAddPayoffDefectCooperate = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffDC();

					int valueWealthAddPayoffCooperateDefectCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffCD();

					setWealth(valueWealthAddPayoffDefectCooperate);

					otherPlayer
							.setWealth(valueWealthAddPayoffCooperateDefectCopy);

				}

				if ((!otherPlayer.isCooperate() && isCooperate())) {

					int valueWealthAddPayoffCooperateDefect = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffCD();

					int valueWealthAddPayoffDefectCooperateCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffDC();

					setWealth(valueWealthAddPayoffCooperateDefect);

					otherPlayer
							.setWealth(valueWealthAddPayoffDefectCooperateCopy);

				}

				if ((!isCooperate() && !otherPlayer.isCooperate())) {

					int valueWealthAddPayoffDefectDefect = getWealth()
							+ getDemographicPrisoner_sDilemma().getPayoffDD();

					int valueWealthAddPayoffDefectDefectCopy = otherPlayer
							.getWealth()
							+ otherPlayer.getDemographicPrisoner_sDilemma()
									.getPayoffDD();

					setWealth(valueWealthAddPayoffDefectDefect);

					otherPlayer.setWealth(valueWealthAddPayoffDefectDefectCopy);

				}

			}
		}

	}

	/**
	 * Increment the Age by One..
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -13)
	public void updateAge() {

		int incrementAge = getAge() + 1;

		setAge(incrementAge);

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -16)
	public void fissionRule() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid gameSpace = (repast.simphony.space.grid.Grid) context
				.getProjection("Game Space");

		if (getWealth() >= getDemographicPrisoner_sDilemma().getFissionWealth()) {

			{

				repast.simphony.query.Query<Object> neighborAvailableforBirthQuery = null;

				neighborAvailableforBirthQuery = new repast.simphony.query.space.grid.VNQuery(
						gameSpace, this, 1, 1);

				repast.simphony.query.Query<Object> neighborAvailableforBirthQueryAvailable = new repast.simphony.query.Query<Object>() {
					public java.lang.Iterable<Object> query() {

						return new repast.simphony.util.collections.FilteredIterator<Object>(
								context.iterator(),
								new org.apache.commons.collections15.Predicate() {
									public boolean evaluate(Object object) {

										repast.simphony.space.grid.GridPoint location = gameSpace
												.getLocation(object);
										if (location != null) {
											java.util.Iterator locIter = gameSpace
													.getObjectsAt(
															location
																	.toIntArray(null))
													.iterator();
											if (locIter.hasNext()) {
												locIter.next();
												if (!locIter.hasNext()) {
													return true;
												}
											}
										}
										return false;

									}
								});

					}
					public java.lang.Iterable<Object> query(
							java.lang.Iterable<Object> other) {
						return new repast.simphony.util.collections.FilteredIterator<Object>(
								query().iterator(),
								repast.simphony.query.QueryUtils
										.createContains(other));
					}
				};

				neighborAvailableforBirthQuery = new repast.simphony.query.AndQuery<Object>(
						neighborAvailableforBirthQuery,
						neighborAvailableforBirthQueryAvailable);

				java.util.Iterator neighborAvailableforBirthIter = neighborAvailableforBirthQuery
						.query().iterator();
				if (neighborAvailableforBirthIter.hasNext()) {
					java.util.List neighborAvailableforBirthList = org.apache.commons.collections15.IteratorUtils
							.toList(neighborAvailableforBirthIter);
					final PlayCell birthLocation = (PlayCell) neighborAvailableforBirthList
							.get(repast.simphony.random.RandomHelper
									.nextIntFromTo(0,
											neighborAvailableforBirthList
													.size() - 1));

					Player createAgents = null;
					for (int i = 0; i < 1; i++) {
						createAgents = new Player();
						context.add(createAgents);

						createAgents
								.setDemographicPrisoner_sDilemma(getDemographicPrisoner_sDilemma());

					}

					int[] movetoPlayerinGameSpaceCopyLoc = gameSpace
							.getLocation(birthLocation).toIntArray(null);
					gameSpace.moveTo(createAgents,
							movetoPlayerinGameSpaceCopyLoc);

					createAgents.setWealth(getDemographicPrisoner_sDilemma()
							.getInheiritedWealth());

					double valueRandomUnit = repast.simphony.random.RandomHelper
							.nextDouble();

					int wealthChildWealth = getWealth()
							- createAgents.getDemographicPrisoner_sDilemma()
									.getInheiritedWealth();

					if (valueRandomUnit < createAgents
							.getDemographicPrisoner_sDilemma()
							.getMutationRate()) {

						boolean valueRandomBoolean = repast.simphony.random.RandomHelper
								.getUniform().nextBoolean();

						createAgents.setCooperate(valueRandomBoolean);

					}

					if (!(valueRandomUnit < createAgents
							.getDemographicPrisoner_sDilemma()
							.getMutationRate())) {
						createAgents.setCooperate(isCooperate());

					}

					setWealth(wealthChildWealth);

				}
			}

		}

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -17)
	public void dieAtAge() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid gameSpace = (repast.simphony.space.grid.Grid) context
				.getProjection("Game Space");

		if (getAge() > getDemographicPrisoner_sDilemma().getDeathAge()) {

			context.remove(this);

		}

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -20)
	public void dieAtWealth0() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid gameSpace = (repast.simphony.space.grid.Grid) context
				.getProjection("Game Space");

		if (getWealth() < 0) {

			context.remove(this);

		}

	}

	/**
	 * Gets the Cooperate property for Player.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Cooperate", usageName = "cooperate", defaultValue = "false")
	public boolean isCooperate() {
		return cooperate;
	}

	/**
	 * Sets the Cooperate property for Player.
	 * 
	 * @param _cooperate the new Cooperate value
	 */

	public void setCooperate(boolean _cooperate) {
		cooperate = _cooperate;
	}

	/**
	 * Gets the Age property for Player.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Age", usageName = "age", defaultValue = "0")
	public int getAge() {
		return age;
	}

	/**
	 * Sets the Age property for Player.
	 * 
	 * @param _age the new Age value
	 */

	public void setAge(int _age) {
		age = _age;
	}

	/**
	 * Gets the Wealth property for Player.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Wealth", usageName = "wealth", defaultValue = "0")
	public int getWealth() {
		return wealth;
	}

	/**
	 * Sets the Wealth property for Player.
	 * 
	 * @param _wealth the new Wealth value
	 */

	public void setWealth(int _wealth) {
		wealth = _wealth;
	}

}
