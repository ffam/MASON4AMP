package org.metaabm.examples.stupid2;

/**
 * Stupid Model 2 Java Implementation.
 * 
 * Generated by metaabm system: Nov 2, 2009 8:54:41 PM PST in project: org.eclipse.amp.amf.examples.repast  */

public class StupidModel2 extends repast.simphony.context.DefaultContext
		implements
			repast.simphony.dataLoader.ContextBuilder {

	/**
	 * The number of bugs to create.
	 */

	private int bugCount = 100;
	/**
	 * The number of habitats to create.
	 */

	private int habitatCount = 0;
	/**
	 * 
	 */

	private boolean maxBugSizeColor = false;
	/**
	 * 
	 */

	private int bugVision = 4;
	/**
	 * The size of each dimension.
	 */

	private int[] grid2DDimensions = new int[2];
	/**
	 * 
	 */

	private repast.simphony.space.grid.Grid grid2D = null;
	/**
	 * Constructs a new Stupid Model 2.
	 */

	public StupidModel2() {
		createUniqueID();
		setGrid2DWidth(100);
		setGrid2DHeight(100);
	}

	repast.simphony.context.Context buildContext;

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		//uniqueID = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			StupidModel2 clone = (StupidModel2) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	public repast.simphony.context.Context getContext() {
		return buildContext;
	}

	/**
	 * Builds and returns a context based on MetaABM generation for repast.simphony. Building a context consists of filling it with
	 * agents, adding projects and so forth. When this is called for the master context
	 * the system will pass in a created context based on information given in the
	 * model.score file. When called for subcontexts, each subcontext that was added
	 * when the master context was built will be passed in.
	 *
	 * @param context
	 * @return the built context.
	 */
	public repast.simphony.context.Context build(
			repast.simphony.context.Context context) {
		this.buildContext = context;

		Bug createBugs = null;
		for (int i = 0; i < getBugCount(); i++) {
			createBugs = new Bug();
			context.add(createBugs);

			createBugs.setStupidModel2(this);

		}

		Habitat createHabitats = null;
		for (int i = 0; i < getHabitatCount(); i++) {
			createHabitats = new Habitat();
			context.add(createHabitats);

			createHabitats.setStupidModel2(this);

		}

		//Agents are never actually added automatically
		repast.simphony.space.grid.GridAdder fillGridAdder = new repast.simphony.space.grid.RandomGridAdder();
		repast.simphony.space.grid.GridBuilderParameters params = new repast.simphony.space.grid.GridBuilderParameters(
				new repast.simphony.space.grid.WrapAroundBorders(),
				fillGridAdder, true, grid2DDimensions);
		grid2D = repast.simphony.context.space.grid.GridFactoryFinder
				.createGridFactory(null).createGrid("Grid 2D", context, params);

		repast.simphony.space.grid.GridDimensions dims = grid2D.getDimensions();

		for (int d0 = 0; d0 < dims.getDimension(0); d0++) {

			for (int d1 = 0; d1 < dims.getDimension(1); d1++) {

				int[] nextLoc = {

				d0, d1};
				org.metaabm.examples.stupid2.Habitat habitat = new org.metaabm.examples.stupid2.Habitat();
				context.add(habitat);
				grid2D.moveTo(habitat, nextLoc);

			}
		}

		return context;
	}

	/**
	 * Gets the Bug Count property for Stupid Model 2.
	 * @return The number of bugs to create.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Bug Count", usageName = "bugCount", defaultValue = "100")
	public int getBugCount() {
		return bugCount;
	}

	/**
	 * Sets the Bug Count property for Stupid Model 2.
	 * The number of bugs to create.
	 * @param _bugCount the new Bug Count value
	 */

	public void setBugCount(int _bugCount) {
		bugCount = _bugCount;
	}

	/**
	 * Gets the Habitat Count property for Stupid Model 2.
	 * @return The number of habitats to create.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Habitat Count", usageName = "habitatCount", defaultValue = "0")
	public int getHabitatCount() {
		return habitatCount;
	}

	/**
	 * Sets the Habitat Count property for Stupid Model 2.
	 * The number of habitats to create.
	 * @param _habitatCount the new Habitat Count value
	 */

	public void setHabitatCount(int _habitatCount) {
		habitatCount = _habitatCount;
	}

	/**
	 * Gets the Max Bug Size Color property for Stupid Model 2.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Max Bug Size Color", usageName = "maxBugSizeColor", defaultValue = "false")
	public boolean isMaxBugSizeColor() {
		return maxBugSizeColor;
	}

	/**
	 * Sets the Max Bug Size Color property for Stupid Model 2.
	 * 
	 * @param _maxBugSizeColor the new Max Bug Size Color value
	 */

	public void setMaxBugSizeColor(boolean _maxBugSizeColor) {
		maxBugSizeColor = _maxBugSizeColor;
	}

	/**
	 * Gets the Bug Vision property for Stupid Model 2.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Bug Vision", usageName = "bugVision", defaultValue = "4")
	public int getBugVision() {
		return bugVision;
	}

	/**
	 * Sets the Bug Vision property for Stupid Model 2.
	 * 
	 * @param _bugVision the new Bug Vision value
	 */

	public void setBugVision(int _bugVision) {
		bugVision = _bugVision;
	}

	/**
	 * Gets the Dimensions property for Grid 2D.
	 * @return The size of each dimension.
	 */

	public int[] getGrid2DDimensions() {
		return grid2DDimensions;
	}

	/**
	 * Sets the Dimensions property for Grid 2D.
	 * The size of each dimension.
	 * @param _grid2DDimensions the new Dimensions value
	 */

	public void setGrid2DDimensions(int[] _grid2DDimensions) {
		grid2DDimensions = _grid2DDimensions;
	}

	/**
	 * Gets the Width property for Grid 2D.
	 * @return The horizontal extent of the space.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Grid 2D Width", usageName = "grid2DWidth", defaultValue = "100")
	public int getGrid2DWidth() {
		return grid2DDimensions[0];
	}

	/**
	 * Sets the Width property for Grid 2D.
	 * The horizontal extent of the space.
	 * @param _grid2DWidth the new Width value
	 */

	public void setGrid2DWidth(int _grid2DWidth) {
		grid2DDimensions[0] = _grid2DWidth;
	}

	/**
	 * Gets the Height property for Grid 2D.
	 * @return The vertical extent of the space.
	 */

	@repast.simphony.parameter.Parameter(displayName = "Grid 2D Height", usageName = "grid2DHeight", defaultValue = "100")
	public int getGrid2DHeight() {
		return grid2DDimensions[1];
	}

	/**
	 * Sets the Height property for Grid 2D.
	 * The vertical extent of the space.
	 * @param _grid2DHeight the new Height value
	 */

	public void setGrid2DHeight(int _grid2DHeight) {
		grid2DDimensions[1] = _grid2DHeight;
	}

	/**
	 * Gets the Grid 2D property for Stupid Model 2.
	 * @return 
	 */

	public repast.simphony.space.grid.Grid getGrid2D() {
		return grid2D;
	}

	/**
	 * Sets the Grid 2D property for Stupid Model 2.
	 * 
	 * @param _grid2D the new Grid 2D value
	 */

	public void setGrid2D(repast.simphony.space.grid.Grid _grid2D) {
		grid2D = _grid2D;
	}

}
