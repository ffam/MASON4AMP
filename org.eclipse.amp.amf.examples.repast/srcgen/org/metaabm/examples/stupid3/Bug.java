package org.metaabm.examples.stupid3;

/**
 * Bug Java Implementation.
 * 
 * Generated by metaabm system: Nov 2, 2009 8:54:40 PM PST in project: org.eclipse.amp.amf.examples.repast  */

public class Bug {

	/**
	 * 
	 */

	private int size = 0;
	/**
	 * Constructs a new Bug.
	 */

	public Bug() {
		createUniqueID();
	}

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		//uniqueID = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			Bug clone = (Bug) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * 
	 */

	private StupidModel3 stupidModel3List = null;

	/**
	 * Gets the Stupid Model 3 property for .
	 * @return 
	 */

	public StupidModel3 getStupidModel3() {
		return stupidModel3List;
	}

	/**
	 * Sets the Stupid Model 3 property for .
	 * 
	 * @param _stupidModel3 the new Stupid Model 3 value
	 */

	public void setStupidModel3(StupidModel3 _stupidModel3) {
		stupidModel3List = _stupidModel3;
	}

	public double randomInRange(double minValue, double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(minValue,
				maxValue);
	}

	public double randomToLimit(double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(0.0,
				maxValue);
	}

	public int randomToLimit(int maxValue) {
		return repast.simphony.random.RandomHelper.nextIntFromTo(0, maxValue);
	}
	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 0, interval = 0, priority = -0)
	public void intializeNonFramework() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid grid2D = (repast.simphony.space.grid.Grid) context
				.getProjection("Grid 2D");

		{

			repast.simphony.query.Query<Object> randomHabitatAvailableQueryQuery = null;

			repast.simphony.query.Query<Object> randomHabitatAvailableQueryQueryAvailable = new repast.simphony.query.Query<Object>() {
				public java.lang.Iterable<Object> query() {

					return new repast.simphony.util.collections.FilteredIterator<Object>(
							context.iterator(),
							new org.apache.commons.collections15.Predicate() {
								public boolean evaluate(Object object) {

									repast.simphony.space.grid.GridPoint location = grid2D
											.getLocation(object);
									if (location != null) {
										java.util.Iterator locIter = grid2D
												.getObjectsAt(
														location
																.toIntArray(null))
												.iterator();
										if (locIter.hasNext()) {
											locIter.next();
											if (!locIter.hasNext()) {
												return true;
											}
										}
									}
									return false;

								}
							});

				}
				public java.lang.Iterable<Object> query(
						java.lang.Iterable<Object> other) {
					return new repast.simphony.util.collections.FilteredIterator<Object>(
							query().iterator(),
							repast.simphony.query.QueryUtils
									.createContains(other));
				}
			};

			randomHabitatAvailableQueryQuery = randomHabitatAvailableQueryQueryAvailable;

			java.util.Iterator randomHabitatAvailableQueryIter = randomHabitatAvailableQueryQuery
					.query().iterator();
			if (randomHabitatAvailableQueryIter.hasNext()) {
				java.util.List randomHabitatAvailableQueryList = org.apache.commons.collections15.IteratorUtils
						.toList(randomHabitatAvailableQueryIter);
				final Habitat randomHabitat = (Habitat) randomHabitatAvailableQueryList
						.get(repast.simphony.random.RandomHelper.nextIntFromTo(
								0, randomHabitatAvailableQueryList.size() - 1));

				int[] movetoHabitatinGrid2DLoc = grid2D.getLocation(
						randomHabitat).toIntArray(null);
				grid2D.moveTo(this, movetoHabitatinGrid2DLoc);

			}
		}

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -4)
	public void randomMovement() {

		final repast.simphony.context.Context context = repast.simphony.util.ContextUtils
				.getContext(this);

		final repast.simphony.space.grid.Grid grid2D = (repast.simphony.space.grid.Grid) context
				.getProjection("Grid 2D");

		{

			repast.simphony.query.Query<Object> nearbySpace_AvailableQueryAndWithin_BugVision_Query_Query = null;

			nearbySpace_AvailableQueryAndWithin_BugVision_Query_Query = new repast.simphony.query.space.grid.MooreQuery(
					grid2D, this, getStupidModel3().getBugVision(),
					getStupidModel3().getBugVision());

			repast.simphony.query.Query<Object> nearbySpace_AvailableQueryAndWithin_BugVision_Query_QueryAvailable = new repast.simphony.query.Query<Object>() {
				public java.lang.Iterable<Object> query() {

					return new repast.simphony.util.collections.FilteredIterator<Object>(
							context.iterator(),
							new org.apache.commons.collections15.Predicate() {
								public boolean evaluate(Object object) {

									repast.simphony.space.grid.GridPoint location = grid2D
											.getLocation(object);
									if (location != null) {
										java.util.Iterator locIter = grid2D
												.getObjectsAt(
														location
																.toIntArray(null))
												.iterator();
										if (locIter.hasNext()) {
											locIter.next();
											if (!locIter.hasNext()) {
												return true;
											}
										}
									}
									return false;

								}
							});

				}
				public java.lang.Iterable<Object> query(
						java.lang.Iterable<Object> other) {
					return new repast.simphony.util.collections.FilteredIterator<Object>(
							query().iterator(),
							repast.simphony.query.QueryUtils
									.createContains(other));
				}
			};

			nearbySpace_AvailableQueryAndWithin_BugVision_Query_Query = new repast.simphony.query.AndQuery<Object>(
					nearbySpace_AvailableQueryAndWithin_BugVision_Query_Query,
					nearbySpace_AvailableQueryAndWithin_BugVision_Query_QueryAvailable);

			java.util.Iterator nearbySpace_AvailableQueryAndWithin_BugVision_Query_Iter = nearbySpace_AvailableQueryAndWithin_BugVision_Query_Query
					.query().iterator();
			if (nearbySpace_AvailableQueryAndWithin_BugVision_Query_Iter
					.hasNext()) {
				java.util.List nearbySpace_AvailableQueryAndWithin_BugVision_Query_List = org.apache.commons.collections15.IteratorUtils
						.toList(nearbySpace_AvailableQueryAndWithin_BugVision_Query_Iter);
				final Habitat nearbySpace = (Habitat) nearbySpace_AvailableQueryAndWithin_BugVision_Query_List
						.get(repast.simphony.random.RandomHelper.nextIntFromTo(
								0,
								nearbySpace_AvailableQueryAndWithin_BugVision_Query_List
										.size() - 1));

				int[] movetoHabitatinGrid2DCopyLoc = grid2D.getLocation(
						nearbySpace).toIntArray(null);
				grid2D.moveTo(this, movetoHabitatinGrid2DCopyLoc);

			}
		}

	}

	/**
	 * .
	 */

	@repast.simphony.engine.schedule.ScheduledMethod(start = 1, interval = 1, priority = -10)
	public void grow() {

		int growIncrementSize = getSize() + 1;

		setSize(growIncrementSize);

	}

	/**
	 * Gets the Size property for Bug.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Size", usageName = "size", defaultValue = "0")
	public int getSize() {
		return size;
	}

	/**
	 * Sets the Size property for Bug.
	 * 
	 * @param _size the new Size value
	 */

	public void setSize(int _size) {
		size = _size;
	}

}
