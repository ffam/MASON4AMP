package org.metaabm.gen.test;

/**
 * Basic Movement State Agent Java Implementation.
 * 
 * Generated by metaabm system: May 13, 2009 11:53:52 AM PDT in project: org.metaabm.gen.repast.test  (testing) */

import static org.junit.Assert.*;

public class BasicMovementStateAgent {

	/**
	 * 
	 */

	private StateEnum state = StateEnum.option1;
	/**
	 * 
	 */

	private boolean someBoolean = false;
	/**
	 * Constructs a new Basic Movement State Agent.
	 */

	public BasicMovementStateAgent() {
		createUniqueID();
	}

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			BasicMovementStateAgent clone = (BasicMovementStateAgent) super
					.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	/**
	 * Most recent version.
	 */

	private BasicMovementModel basicMovementModelList = null;

	/**
	 * Gets the Basic Movement Model property for .
	 * @return Most recent version.
	 */

	public BasicMovementModel getBasicMovementModel() {
		return basicMovementModelList;
	}

	/**
	 * Sets the Basic Movement Model property for .
	 * Most recent version.
	 * @param _basicMovementModel the new Basic Movement Model value
	 */

	public void setBasicMovementModel(BasicMovementModel _basicMovementModel) {
		basicMovementModelList = _basicMovementModel;
	}

	public double randomInRange(double minValue, double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(minValue,
				maxValue);
	}

	public double randomToLimit(double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(0.0,
				maxValue);
	}

	public int randomToLimit(int maxValue) {
		return repast.simphony.random.RandomHelper.nextIntFromTo(0, maxValue);
	}

	/**
	 * Gets the State property for Basic Movement State Agent.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "State", usageName = "state", defaultValue = "option1")
	public StateEnum getState() {
		return state;
	}

	/**
	 * Sets the State property for Basic Movement State Agent.
	 * 
	 * @param _state the new State value
	 */

	public void setState(StateEnum _state) {
		state = _state;
	}

	/**
	 * Gets the Some Boolean property for Basic Movement State Agent.
	 * @return 
	 */

	@repast.simphony.parameter.Parameter(displayName = "Some Boolean", usageName = "someBoolean", defaultValue = "false")
	public boolean isSomeBoolean() {
		return someBoolean;
	}

	/**
	 * Sets the Some Boolean property for Basic Movement State Agent.
	 * 
	 * @param _someBoolean the new Some Boolean value
	 */

	public void setSomeBoolean(boolean _someBoolean) {
		someBoolean = _someBoolean;
	}

}
