/*
* generated by Xtext
*/
grammar InternalATest;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.amp.amf.testing.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.amp.amf.testing.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.amp.amf.testing.services.ATestGrammarAccess;

}

@parser::members {
 
 	private ATestGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ATestGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTests
entryRuleTests 
:
{ before(grammarAccess.getTestsRule()); }
	 ruleTests
{ after(grammarAccess.getTestsRule()); } 
	 EOF 
;

// Rule Tests
ruleTests
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestsAccess().getImportURIAssignment()); }
(rule__Tests__ImportURIAssignment)
{ after(grammarAccess.getTestsAccess().getImportURIAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestMember
entryRuleTestMember 
:
{ before(grammarAccess.getTestMemberRule()); }
	 ruleTestMember
{ after(grammarAccess.getTestMemberRule()); } 
	 EOF 
;

// Rule TestMember
ruleTestMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestMemberAccess().getImportURIAssignment()); }
(rule__TestMember__ImportURIAssignment)
{ after(grammarAccess.getTestMemberAccess().getImportURIAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getGroup()); }
(rule__Constraint__Group__0)
{ after(grammarAccess.getConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealValue
entryRuleRealValue 
:
{ before(grammarAccess.getRealValueRule()); }
	 ruleRealValue
{ after(grammarAccess.getRealValueRule()); } 
	 EOF 
;

// Rule RealValue
ruleRealValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealValueAccess().getValueAssignment()); }
(rule__RealValue__ValueAssignment)
{ after(grammarAccess.getRealValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
(rule__StringValue__ValueAssignment)
{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Measure
ruleMeasure
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMeasureAccess().getAlternatives()); }
(rule__Measure__Alternatives)
{ after(grammarAccess.getMeasureAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BOOLEAN
ruleBOOLEAN
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getAlternatives()); }
(rule__BOOLEAN__Alternatives)
{ after(grammarAccess.getBOOLEANAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_3_0()); }
(rule__Model__Group_3_0__0)
{ after(grammarAccess.getModelAccess().getGroup_3_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getGroup_3_1()); }
(rule__Model__Group_3_1__0)
{ after(grammarAccess.getModelAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_1()); }
	ruleStringValue
{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getRealValueParserRuleCall_2()); }
	ruleRealValue
{ after(grammarAccess.getValueAccess().getRealValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_3()); }
	ruleBooleanValue
{ after(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMeasureAccess().getCOUNTEnumLiteralDeclaration_0()); }
(	'Count' 
)
{ after(grammarAccess.getMeasureAccess().getCOUNTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMeasureAccess().getAVERAGEEnumLiteralDeclaration_1()); }
(	'Average' 
)
{ after(grammarAccess.getMeasureAccess().getAVERAGEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMeasureAccess().getSUMEnumLiteralDeclaration_2()); }
(	'Sum' 
)
{ after(grammarAccess.getMeasureAccess().getSUMEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMeasureAccess().getMINIMUMEnumLiteralDeclaration_3()); }
(	'Minimum' 
)
{ after(grammarAccess.getMeasureAccess().getMINIMUMEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMeasureAccess().getMAXIMUMEnumLiteralDeclaration_4()); }
(	'Maximum' 
)
{ after(grammarAccess.getMeasureAccess().getMAXIMUMEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0()); }
(	'true' 
)
{ after(grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1()); }
(	'false' 
)
{ after(grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
(rule__Model__NameAssignment_1)?
{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDescriptionAssignment_2()); }
(rule__Model__DescriptionAssignment_2)?
{ after(grammarAccess.getModelAccess().getDescriptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAlternatives_3()); }
(rule__Model__Alternatives_3)?
{ after(grammarAccess.getModelAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Model__Group_3_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3_0__0__Impl
	rule__Model__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_3_0_0()); }
(rule__Model__Group_3_0_0__0)?
{ after(grammarAccess.getModelAccess().getGroup_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getContraintsAssignment_3_0_1()); }
(rule__Model__ContraintsAssignment_3_0_1)
{ after(grammarAccess.getModelAccess().getContraintsAssignment_3_0_1()); }
)
(
{ before(grammarAccess.getModelAccess().getContraintsAssignment_3_0_1()); }
(rule__Model__ContraintsAssignment_3_0_1)*
{ after(grammarAccess.getModelAccess().getContraintsAssignment_3_0_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_3_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3_0_0__0__Impl
	rule__Model__Group_3_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTestsKeyword_3_0_0_0()); }

	'tests' 

{ after(grammarAccess.getModelAccess().getTestsKeyword_3_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTestsAssignment_3_0_0_1()); }
(rule__Model__TestsAssignment_3_0_0_1)
{ after(grammarAccess.getModelAccess().getTestsAssignment_3_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3_1__0__Impl
	rule__Model__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContainsKeyword_3_1_0()); }

	'contains' 

{ after(grammarAccess.getModelAccess().getContainsKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContainsAssignment_3_1_1()); }
(rule__Model__ContainsAssignment_3_1_1)*
{ after(grammarAccess.getModelAccess().getContainsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getMeasureAssignment_0()); }
(rule__Constraint__MeasureAssignment_0)
{ after(grammarAccess.getConstraintAccess().getMeasureAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getConstraintAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getAgentAssignment_2()); }
(rule__Constraint__AgentAssignment_2)
{ after(grammarAccess.getConstraintAccess().getAgentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__3__Impl
	rule__Constraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getConstraintAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__4__Impl
	rule__Constraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getAttributeAssignment_4()); }
(rule__Constraint__AttributeAssignment_4)
{ after(grammarAccess.getConstraintAccess().getAttributeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__5__Impl
	rule__Constraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getGroup_5()); }
(rule__Constraint__Group_5__0)?
{ after(grammarAccess.getConstraintAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__6__Impl
	rule__Constraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getConstraintAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getGroup_7()); }
(rule__Constraint__Group_7__0)
{ after(grammarAccess.getConstraintAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Constraint__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_5__0__Impl
	rule__Constraint__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getEqualsSignKeyword_5_0()); }

	'=' 

{ after(grammarAccess.getConstraintAccess().getEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getQualifierAssignment_5_1()); }
(rule__Constraint__QualifierAssignment_5_1)
{ after(grammarAccess.getConstraintAccess().getQualifierAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constraint__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_7__0__Impl
	rule__Constraint__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getEqualsSignKeyword_7_0()); }

	'=' 

{ after(grammarAccess.getConstraintAccess().getEqualsSignKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_7__1__Impl
	rule__Constraint__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getLeftSquareBracketKeyword_7_1()); }

	'[' 

{ after(grammarAccess.getConstraintAccess().getLeftSquareBracketKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_7__2__Impl
	rule__Constraint__Group_7__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getMinValueAssignment_7_2()); }
(rule__Constraint__MinValueAssignment_7_2)
{ after(grammarAccess.getConstraintAccess().getMinValueAssignment_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_7__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_7__3__Impl
	rule__Constraint__Group_7__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_7__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getCommaKeyword_7_3()); }

	',' 

{ after(grammarAccess.getConstraintAccess().getCommaKeyword_7_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_7__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_7__4__Impl
	rule__Constraint__Group_7__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_7__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getMaxValueAssignment_7_4()); }
(rule__Constraint__MaxValueAssignment_7_4)
{ after(grammarAccess.getConstraintAccess().getMaxValueAssignment_7_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_7__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group_7__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_7__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getRightSquareBracketKeyword_7_5()); }

	']' 

{ after(grammarAccess.getConstraintAccess().getRightSquareBracketKeyword_7_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Model__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getModelAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DescriptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDescriptionDESC_STRINGTerminalRuleCall_2_0()); }
	RULE_DESC_STRING{ after(grammarAccess.getModelAccess().getDescriptionDESC_STRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TestsAssignment_3_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTestsTestsParserRuleCall_3_0_0_1_0()); }
	ruleTests{ after(grammarAccess.getModelAccess().getTestsTestsParserRuleCall_3_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ContraintsAssignment_3_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContraintsConstraintParserRuleCall_3_0_1_0()); }
	ruleConstraint{ after(grammarAccess.getModelAccess().getContraintsConstraintParserRuleCall_3_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ContainsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContainsTestMemberParserRuleCall_3_1_1_0()); }
	ruleTestMember{ after(grammarAccess.getModelAccess().getContainsTestMemberParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tests__ImportURIAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestsAccess().getImportURISTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getTestsAccess().getImportURISTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestMember__ImportURIAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestMemberAccess().getImportURISTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getTestMemberAccess().getImportURISTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__MeasureAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getMeasureMeasureEnumRuleCall_0_0()); }
	ruleMeasure{ after(grammarAccess.getConstraintAccess().getMeasureMeasureEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__AgentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getAgentSAgentCrossReference_2_0()); }
(
{ before(grammarAccess.getConstraintAccess().getAgentSAgentIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getConstraintAccess().getAgentSAgentIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getConstraintAccess().getAgentSAgentCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__AttributeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getAttributeSAttributeCrossReference_4_0()); }
(
{ before(grammarAccess.getConstraintAccess().getAttributeSAttributeIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getConstraintAccess().getAttributeSAttributeIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getConstraintAccess().getAttributeSAttributeCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__QualifierAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getQualifierSStateValueCrossReference_5_1_0()); }
(
{ before(grammarAccess.getConstraintAccess().getQualifierSStateValueIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getConstraintAccess().getQualifierSStateValueIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getConstraintAccess().getQualifierSStateValueCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__MinValueAssignment_7_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getMinValueValueParserRuleCall_7_2_0()); }
	ruleValue{ after(grammarAccess.getConstraintAccess().getMinValueValueParserRuleCall_7_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__MaxValueAssignment_7_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getMaxValueValueParserRuleCall_7_4_0()); }
	ruleValue{ after(grammarAccess.getConstraintAccess().getMaxValueValueParserRuleCall_7_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTEGERTerminalRuleCall_0()); }
	RULE_INTEGER{ after(grammarAccess.getIntValueAccess().getValueINTEGERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealValueAccess().getValueREALTerminalRuleCall_0()); }
	RULE_REAL{ after(grammarAccess.getRealValueAccess().getValueREALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBOOLEANEnumRuleCall_0()); }
	ruleBOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBOOLEANEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INTEGER : '-'? ('0'..'9')+;

RULE_REAL : '-'? ('0'..'9')* '.' ('0'..'9')*;

RULE_DESC_STRING : '\u00AB' ('\\' ('b'|'t'|'n'|'f'|'r'|'\u00AB'|'\u00BB'|'\\')|~(('\\'|'\u00AB'|'\u00BB')))* '\u00BB';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


