«IMPORT emf»
«IMPORT metaabm»
«IMPORT metaabm::act»

«EXTENSION metaabm::tmpl::names»
«EXTENSION metaabm::tmpl::types»
«EXTENSION metaabm::tmpl::infer»
«EXTENSION metaabm::repast::tmpl::inferrepast»

«REM»Author: Miles Parker«ENDREM»

«DEFINE DisplayStyle (SProjection proj) FOR SStyle-»
      <string>«implementation.qualifiedName»</string>
«ENDDEFINE»
«DEFINE DisplayStyle (SGeography proj) FOR SStyleShape-»
<string>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;sld:UserStyle xmlns=&quot;http://www.opengis.net/sld&quot; xmlns:sld=&quot;http://www.opengis.net/sld&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot;&gt;
&lt;sld:Name&gt;Default Styler&lt;/sld:Name&gt;
&lt;sld:Title&gt;Default Styler&lt;/sld:Title&gt;
&lt;sld:Abstract&gt;&lt;/sld:Abstract&gt;&lt;sld:FeatureTypeStyle&gt;
&lt;sld:Name&gt;name&lt;/sld:Name&gt;
&lt;sld:Title&gt;Default Styler&lt;/sld:Title&gt;
&lt;sld:Abstract&gt;abstract&lt;/sld:Abstract&gt;
&lt;sld:FeatureTypeName&gt;«agent.qualName()».FeatureType&lt;/sld:FeatureTypeName&gt;
&lt;sld:SemanticTypeIdentifier&gt;generic:geometry&lt;/sld:SemanticTypeIdentifier&gt;
&lt;sld:Rule&gt;
&lt;sld:Title&gt; &lt;/sld:Title&gt;
&lt;sld:MaxScaleDenominator&gt;1.7976931348623157E308&lt;/sld:MaxScaleDenominator&gt;
&lt;sld:«shapeName()»Symbolizer&gt;
&lt;sld:Fill&gt;
&lt;sld:CssParameter name=&quot;fill&quot;&gt;
&lt;ogc:Literal&gt;#FF0000&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;sld:CssParameter name=&quot;fill-opacity&quot;&gt;
&lt;ogc:Literal&gt;1.0&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;/sld:Fill&gt;
&lt;sld:Stroke&gt;
&lt;sld:CssParameter name=&quot;stroke&quot;&gt;
&lt;ogc:Literal&gt;#000000&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;sld:CssParameter name=&quot;stroke-linecap&quot;&gt;
&lt;ogc:Literal&gt;butt&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;sld:CssParameter name=&quot;stroke-linejoin&quot;&gt;
&lt;ogc:Literal&gt;miter&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;sld:CssParameter name=&quot;stroke-opacity&quot;&gt;
&lt;ogc:Literal&gt;1.0&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;sld:CssParameter name=&quot;stroke-width&quot;&gt;
&lt;ogc:Literal&gt;1.0&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;sld:CssParameter name=&quot;stroke-dashoffset&quot;&gt;
&lt;ogc:Literal&gt;0.0&lt;/ogc:Literal&gt;
&lt;/sld:CssParameter&gt;
&lt;/sld:Stroke&gt;
&lt;/sld:«shapeName()»Symbolizer&gt;
&lt;/sld:Rule&gt;
&lt;/sld:FeatureTypeStyle&gt;
&lt;/sld:UserStyle&gt;</string>
«ENDDEFINE»

«DEFINE VisualizationProperties FOR SProjection-»«ENDDEFINE»
«DEFINE VisualizationProperties FOR SNDimensional-»
  <visualizationProperties class="repast.simphony.visualization.UnitSizeLayoutProperties">
    <unitSize>10.0</unitSize>
  </visualizationProperties>
«ENDDEFINE»

«DEFINE ProjectionProps FOR SProjection-»«ENDDEFINE»
«DEFINE ProjectionProps FOR SNDimensional-»
          <entry>
            <string>«projectionDecorator()»</string>
            <map>
              <entry>
                <string>SHOW</string>
                <boolean>false</boolean>
              </entry>
              <entry>
                <string>UNIT_SIZE</string>
                <float>10.0</float>
              </entry>
              <entry>
                <string>COLOR</string>
                <int>-1</int>
              </entry>
            </map>
          </entry>
«ENDDEFINE»

«DEFINE DisplayProps FOR SProjection-»«ENDDEFINE»
«DEFINE DisplayProps FOR SGeography-»
    <entry>
      <string>class repast.simphony.visualization.gis.DisplayGIS.SHP_FILE_STYLE_PROP</string>
      <map/>
    </entry>
«ENDDEFINE»

«DEFINE Model FOR SContext-»

	«IF implementation.mode == SImplementationMode::Generate-»
	«FILE rsFileName() + "scenario.xml"-»
<?xml version="1.0" encoding="UTF-8" ?>
<Scenario>
<repast.simphony.dataLoader.engine.ClassNameDataLoaderAction context="«label»" file="repast.simphony.dataLoader.engine.ClassNameDataLoaderAction_0.xml" />
«FOREACH projections AS proj»
<repast.simphony.action.display context="«label»" file="repast.simphony.action.display_«proj.id()».xml" />
«ENDFOREACH»
«FOREACH agents AS agent»
«IF !agent.isHost()-»
<repast.simphony.data.engine.DefaultDataGathererDescriptorAction context="Demographic Prisoner_s Dilemma" file="repast.simphony.data.engine.DefaultDataGathererDescriptorAction_«agent.id()».xml" />
«ENDIF-»
«ENDFOREACH-»
</Scenario>
	«ENDFILE»
	
	«FILE rsFileName() + "repast.simphony.dataLoader.engine.ClassNameDataLoaderAction_0.xml"-»
<string>«implementation.qualifiedName»</string>
	«ENDFILE»
	
«FOREACH projections AS proj»
	«FILE rsFileName() + "repast.simphony.action.display_" + proj.id() + ".xml"-»
<repast.simphony.visualization.engine.DefaultDisplayDescriptor>
  <type>«proj.displayType()»</type>
  <styles>
	«FOREACH agents AS subAgent-»
	«FOREACH subAgent.styles AS style-»
    <entry>
      <string>«subAgent.implementation.qualifiedName»</string>
	«EXPAND DisplayStyle(proj) FOR style-»
    </entry>
	«ENDFOREACH-»
	«ENDFOREACH-»
  </styles>
  <layerOrder>
    «FOREACH agents.sortBy(e | ((SAgent) e).isHost()) AS subAgent-»
    <entry>
      <string>«subAgent.implementation.qualifiedName»</string>
      <int>«subAgent.isHost() ? "0" : "1"»</int>
    </entry>
     «ENDFOREACH-»
  </layerOrder>
  <netStyles/>
  <frequency>ON_MOVE</frequency>
  <schedParams>
    <start>1.0</start>
    <interval>1.0</interval>
    <priority>-Infinity</priority>
    <duration>-1.0</duration>
    <frequency>REPEAT</frequency>
  </schedParams>
  <layoutProjection>«proj.label»</layoutProjection>
  <layoutInterval>0</layoutInterval>
  <projections>
    <«proj.repastType()»>
      <name>«proj.label»</name>
    </«proj.repastType()»>
  </projections>
  <valueLayers/>
  «EXPAND VisualizationProperties FOR proj»
  <projectionDescriptors>
    <entry>
      <string>«proj.label»</string>
      <repast.simphony.visualization.«proj.projectionDescriptor()»>
        <proj class="«proj.repastType()»" reference="../../../../projections/«proj.repastType()»"/>
        <props>
  «EXPAND ProjectionProps FOR proj»
        </props>
      </repast.simphony.visualization.«proj.projectionDescriptor()»>
    </entry>
  </projectionDescriptors>
  <props>
  «EXPAND DisplayProps FOR proj»
  </props>
  <name>«label» Display</name>
</repast.simphony.visualization.engine.DefaultDisplayDescriptor>
	«ENDFILE»
«ENDFOREACH»
	«ENDIF-»

«FOREACH agents AS agent»
«IF implementation.mode == SImplementationMode::Generate && !agent.isHost()-»
	«FILE rsFileName() + "repast.simphony.data.engine.DefaultDataGathererDescriptorAction_" + agent.id() + ".xml"-»
<repast.simphony.data.engine.DefaultDataGathererDescriptor>
  <dataSetId class="string">«id()»Set</dataSetId>
  <scheduleParameters>
    <start>1.0</start>
    <interval>1.0</interval>
    <priority>-Infinity</priority>
    <duration>-1.0</duration>
    <frequency>REPEAT</frequency>
  </scheduleParameters>
  <dataMappingContainer class="repast.simphony.data.logging.gather.DefaultDataMappingContainer">
    <nameMappingTable/>
    <mappingNameTable/>
  </dataMappingContainer>
  <aggregateContainer class="repast.simphony.data.logging.gather.DefaultAggregateDataMappingContainer">
    <nameMappingTable>
      <entry>
        <string>Tick</string>
        <repast.simphony.data.logging.gather.DefaultTimeDataMapping/>
      </entry>
  «EXPAND DataEntry FOR agent»
    </nameMappingTable>
    <mappingNameTable>
  «EXPAND MappingEntry FOR agent»
      <entry>
        <repast.simphony.data.logging.gather.DefaultTimeDataMapping reference="../../../nameMappingTable/entry/repast.simphony.data.logging.gather.DefaultTimeDataMapping"/>
        <string>Tick</string>
      </entry>
    </mappingNameTable>
    <alternatedNameTable/>
    <nameAlternatedTable/>
  </aggregateContainer>
  <agentClass>«agent.implementation.qualifiedName»</agentClass>
  <name>«label» Data Set</name>
</repast.simphony.data.engine.DefaultDataGathererDescriptor>«ENDFILE»
«ENDIF-»
«ENDFOREACH»
«ENDDEFINE» 

«DEFINE DataEntry (SAttribute secondAttr, String negate, String measure) FOR SAttribute-»
      <entry>
        <string>«label» «measure»</string>
        <repast.simphony.data.logging.gather.aggregate.«measure»Mapping>
          <decorated class="repast.simphony.data.logging.gather.MethodMapping">
            <method>
              <class>«qualName()»</class>
              <name>«getterName()»</name>
              <parameter-types/>
            </method>
          </decorated>
          <type>«measure»</type>
        </repast.simphony.data.logging.gather.aggregate.«measure»Mapping>
      </entry>
«ENDDEFINE»
«DEFINE DataEntry (SAttribute secondAttr, String negate) FOR SAttribute-»
	«IF gatherData-»
		«EXPAND DataEntry(secondAttr, negate, "Sum")»
		«EXPAND DataEntry(secondAttr, negate, "Min")»
		«EXPAND DataEntry(secondAttr, negate, "Max")»
		«EXPAND DataEntry(secondAttr, negate, "Mean")»
	«ENDIF-»
«ENDDEFINE»
«DEFINE DataEntry FOR SAgent-»
      <entry>
        <string>«label» Count</string>
        <repast.simphony.data.logging.gather.aggregate.CountMapping>
          <type>Count</type>
        </repast.simphony.data.logging.gather.aggregate.CountMapping>
      </entry>
	 «EXPAND DataEntry(null, "") FOREACH attributes-»
«ENDDEFINE»

«DEFINE MappingEntry (SAttribute secondAttr, String negate, String measure, int index) FOR SAttribute»
      <entry>
        <repast.simphony.data.logging.gather.aggregate.«measure»Mapping reference="../../../nameMappingTable/entry[«index»]/repast.simphony.data.logging.gather.aggregate.«measure»Mapping"/>
        <string>«label» «measure»</string>
      </entry>
«ENDDEFINE»
«DEFINE MappingEntry (SAttribute secondAttr, String negate) FOR SAttribute-»
	«IF gatherData-»
		«EXPAND MappingEntry(secondAttr, negate, "Sum", owner.attributes.select(e | e.gatherData).indexOf(this) * 4 + 3 + 0)»
		«EXPAND MappingEntry(secondAttr, negate, "Min", owner.attributes.select(e | e.gatherData).indexOf(this) * 4 + 3 + 1)»
		«EXPAND MappingEntry(secondAttr, negate, "Max", owner.attributes.select(e | e.gatherData).indexOf(this) * 4 + 3 + 2)»
		«EXPAND MappingEntry(secondAttr, negate, "Mean", owner.attributes.select(e | e.gatherData).indexOf(this) * 4 + 3 + 3)»
	«ENDIF-»
«ENDDEFINE»
«DEFINE MappingEntry FOR SAgent-»
      <entry>
        <repast.simphony.data.logging.gather.aggregate.CountMapping reference="../../../nameMappingTable/entry[2]/repast.simphony.data.logging.gather.aggregate.CountMapping"/>
        <string>«label» Count</string>
      </entry>
	 «EXPAND MappingEntry(null, "") FOREACH attributes»
«ENDDEFINE»

