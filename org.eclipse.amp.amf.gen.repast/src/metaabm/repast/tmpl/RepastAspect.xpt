«IMPORT metaabm»
«IMPORT metaabm::act»
«IMPORT metaabm::function»
«IMPORT emf»

«EXTENSION metaabm::tmpl::types»
«EXTENSION metaabm::tmpl::names»
«EXTENSION metaabm::tmpl::infer»
«EXTENSION metaabm::tmpl::util»
«EXTENSION metaabm::tmpl::projections»
«EXTENSION metaabm::repast::tmpl::projectionsrepast»
«EXTENSION metaabm::repast::tmpl::inferrepast»

«REM»Author: Miles Parker«ENDREM»

«AROUND metaabm::tmpl::Java::ExtendType FOR SGrid-»repast.simphony.space.grid.Grid«ENDAROUND»
«AROUND metaabm::tmpl::Java::ExtendType FOR SNetwork-»repast.simphony.space.graph.Network«ENDAROUND»
«AROUND metaabm::tmpl::Java::ExtendType FOR SContinuousSpace-»repast.simphony.space.continuous.ContinuousSpace«ENDAROUND»
«AROUND metaabm::tmpl::Java::ExtendType FOR SGeography-»repast.simphony.space.gis.Geography«ENDAROUND»

«AROUND metaabm::tmpl::Java::ClassInheiritance FOR SContext-» extends repast.simphony.context.DefaultContext implements repast.simphony.dataLoader.ContextBuilder «testing() ? ", " + interid() : ""»«ENDAROUND»
«AROUND metaabm::tmpl::Java::ClassInheiritance FOR SAgent-»«ENDAROUND»
«AROUND metaabm::tmpl::Java::ClassInheiritance FOR SStyle-» extends repast.simphony.visualization.visualization2D.style.DefaultStyle2D«ENDAROUND»
	
«AROUND metaabm::tmpl::Java::Class FOR SAgent»
@repast.simphony.annotate.AgentAnnot(displayName = "«label»")
  «targetDef.proceed()» 
«ENDAROUND»

«DEFINE MethodAnnotation FOR IID-»«ENDDEFINE»
«DEFINE MethodAnnotation FOR SAttribute-»
    «IF !suppressAccessor()-»
	@repast.simphony.parameter.Parameter(displayName="«paramDisplayName()»", usageName="«paramid()»", defaultValue=«defaultValueQuoted()»)
	«ENDIF-»
«ENDDEFINE»

«AROUND metaabm::tmpl::Java::GetterMethod FOR metaabm::IID»
	«EXPAND MethodAnnotation»
	«targetDef.proceed()» 
«ENDAROUND»

«DEFINE MethodAnnotation FOR ASchedule»
	@repast.simphony.engine.schedule.ScheduledMethod(start=«start», interval=«interval», priority=«priority»)
«ENDDEFINE»
«DEFINE MethodAnnotation FOR ARule»
	@repast.simphony.engine.schedule.ScheduledMethod(start=1, interval=1, priority=-«group.members.indexOf(this)»)
«ENDDEFINE»
«DEFINE MethodAnnotation FOR AInitialize»
	@repast.simphony.engine.schedule.ScheduledMethod(start=0, interval=0, priority=-«group.members.indexOf(this)»)
«ENDDEFINE»

«AROUND metaabm::tmpl::Java::MethodImpl FOR metaabm::IID-»
	«EXPAND MethodAnnotation»
  	«targetDef.proceed()» 
«ENDAROUND»

«AROUND metaabm::tmpl::Java::Body FOR SContext»
	repast.simphony.context.Context buildContext;

    «EXPAND metaabm::tmpl::Java::UtilBody»
    
    public repast.simphony.context.Context getContext() {
    	return buildContext;
    }
    
	/**
	 * Builds and returns a context based on MetaABM generation for repast.simphony. Building a context consists of filling it with
	 * agents, adding projects and so forth. When this is called for the master context
	 * the system will pass in a created context based on information given in the
	 * model.score file. When called for subcontexts, each subcontext that was added
	 * when the master context was built will be passed in.
	 *
	 * @param context
	 * @return the built context.
	 */
	public repast.simphony.context.Context build(repast.simphony.context.Context context) {
		this.buildContext = context;
        «EXPAND metaabm::tmpl::Java::Builder FOREACH projections-»
		«IF rootActivity != null-»
			«EXPAND metaabm::tmpl::Java::Builder FOR rootActivity-»
		«ENDIF-»
		return context;
	}	
«ENDAROUND» 

«AROUND metaabm::tmpl::Java::Body FOR SAgent»
	«targetDef.proceed()»
	«IF owner != null-»
	«EXPAND metaabm::tmpl::Java::Field FOR owner»
	«EXPAND metaabm::tmpl::Java::Accessor FOR owner»
	«ENDIF-»
	public double randomInRange(double minValue,
			double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(minValue, maxValue);
	}
	
	public double randomToLimit(double maxValue) {
		return repast.simphony.random.RandomHelper.nextDoubleFromTo(0.0, maxValue);
	}
	
	public int randomToLimit(int maxValue) {
		return repast.simphony.random.RandomHelper.nextIntFromTo(0, maxValue);
	}
«ENDAROUND» 

«DEFINE MoveTo (AAct act, List[AAct] path) FOR SProjection»
			int[] «act.id()»Loc = «id()».getLocation(«act.dest().selid().expl()»).toIntArray(null);
			«id()».moveTo(«act.selected.selid().expl()», «act.id()»Loc);
«ENDDEFINE»
«DEFINE MoveTo (AAct act, List[AAct] path) FOR SNetwork»
            java.lang.Iterable<repast.simphony.space.graph.RepastEdge> outEdges = «id()».getOutEdges(«act.selected.selid().expl()»);
            for (repast.simphony.space.graph.RepastEdge edge : outEdges) {
                «id()».removeEdge(edge);
            }
            java.lang.Iterable<repast.simphony.space.graph.RepastEdge> inEdges = «id()».getInEdges(«act.selected.selid().expl()»);
            for (repast.simphony.space.graph.RepastEdge edge : inEdges) {
                «id()».removeEdge(edge);
            }
            java.lang.Iterable<repast.simphony.space.graph.RepastEdge> outNewEdges = «id()».getOutEdges(«act.dest().selid().expl()»);
            for (repast.simphony.space.graph.RepastEdge edge : outNewEdges) {
                «id()».addEdge(edge);
            }
            java.lang.Iterable<repast.simphony.space.graph.RepastEdge> inNewEdges = «id()».getInEdges(«act.dest().selid().expl()»);
            for (repast.simphony.space.graph.RepastEdge edge : inNewEdges) {
                «id()».addEdge(edge);
            }
«ENDDEFINE»

«AROUND metaabm::tmpl::Java::InnerBlock (List[metaabm::act::AAct] path, Boolean inner) FOR AMove»
		«EXPAND MoveTo (this, path) FOR dest().space»
«ENDAROUND»
«AROUND metaabm::tmpl::Java::InnerBlock (List[metaabm::act::AAct] path, Boolean inner) FOR ADie»
		  context.remove(«selected.selid().expl()»);
«ENDAROUND»
«AROUND metaabm::tmpl::Java::InnerBlock (List[metaabm::act::AAct] path, Boolean inner) FOR ALoadAgents»
		try {
			repast.simphony.space.gis.ShapefileLoader loader = new repast.simphony.space.gis.ShapefileLoader<«agent.typeName()»>(«agent.typeName()».class, new java.net.URL("«sourceURL»"), «space.id()», context);
			while (loader.hasNext()) {
				«agent.typeName()» «agent.id()» = («agent.typeName()») loader.next();
			    «agent.id()».set«this.reference.parent.id().toFirstUpper()»(context);
			}
		} catch (java.net.MalformedURLException e) {
			throw new java.lang.RuntimeException("Couldn't load geography file.", e);
		}
«ENDAROUND»
«AROUND metaabm::tmpl::Java::InnerBlock (List[metaabm::act::AAct] path, Boolean inner) FOR ACreateAgents»
		«agent.typeName()» «id()» = null;
		for (int i = 0; i < «agentCount != null ? agentCount.bind(path, inner) : "1"»; i++) {
			«id()» = new «agent.typeName()»();
			«IF group.reference != agent-»
			context.add(«id()»);
		    «id()».«agent.owner.setterName()»(this);
		    «ELSE»
		    «id()».addSubContext(«id()»);
		    «ENDIF-»
		}
«ENDAROUND»

«AROUND metaabm::tmpl::Java::InnerBlock (List[metaabm::act::AAct] path, Boolean inner) FOR AEvaluate»
    «IF selected == rootSelected || allTargets.typeSelect(ASet).collect(e | e.parameter).size > 0-»
	«targetDef.proceed()»
	«ENDIF-»
	«IF function.id().startsWith("color")-»
		setPaint(«id()»);
	«ELSEIF function.id().startsWith("shape")»
		shape = «id()»;
	«ENDIF-»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::ActionBody FOR AAct-»
	«IF allTargets.exists(e | e.expandSpatialBlock() || ATransform.isInstance(e))-»
    final repast.simphony.context.Context context = repast.simphony.util.ContextUtils.getContext(«!styleRule() ? "this" : reference.id()»);
    «FOREACH allTargets.collect(e | e.selfor().space).addAll(allTargets.collect(e | e.dest().space)).toSet() AS space»
    «IF space != null-»
	    final «EXPAND metaabm::tmpl::Java::ExtendType FOR space» «space.id()» = («EXPAND metaabm::tmpl::Java::ExtendType FOR space») context.getProjection("«space.label»");
    «ENDIF-»
    «ENDFOREACH»
    «ENDIF-»
    «targetDef.proceed()»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::FunctionInnerBlock (List[metaabm::act::AAct] path, Boolean inner) FOR ASink-»
    «IF function.id() == "randomUnit"-»
        repast.simphony.random.RandomHelper.nextDouble()
    «ELSEIF function.id() == "randomIs"-»
        repast.simphony.random.RandomHelper.getUniform().nextBoolean()
	«ELSEIF function.id() == "randomInRange"-»
		«IF resultType() == SAttributeType::Integer»repast.simphony.random.RandomHelper.nextIntFromTo(«inputs.expression(path, inner).toString(", ")-»)
        «ELSE»repast.simphony.random.RandomHelper.nextDoubleFromTo(«inputs.expression(path, inner).toString(", ")»)
		«ENDIF-»
    «ELSEIF function.id() == "uniformDistribution"-»
        repast.simphony.random.RandomHelper.nextDoubleFromTo(«inputs.expression(path, inner).toString(", ")»);
    «ELSEIF function.id() == "randomToLimit"-»
		«IF resultType() == SAttributeType::Integer»repast.simphony.random.RandomHelper.nextIntFromTo(0, «inputs.expression(path, inner).toString(", ")-»)
        «ELSE»repast.simphony.random.RandomHelper.nextDoubleFromTo(0, «inputs.expression(path, inner).toString(", ")»)
		«ENDIF-»
    «ELSEIF function.id() == "timeNow"-»
        (int) repast.simphony.engine.environment.RunEnvironment.getInstance().getCurrentSchedule().getTickCount()
    «ELSEIF function.shape()-»
		«IF function.id() == "shapeOval"-»
		SHAPE_OVAL
		«ELSEIF function.id() == "shapeRectangle"-»
		SHAPE_RECT
		«ELSEIF function.id() == "shapeMarker"-»
		SHAPE_MARKER
		«ELSE-»
		SHAPE_UNKNOWN
		«ENDIF-» 
	«ELSE-»«targetDef.proceed()»
	«ENDIF-»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::ActionBody FOR FFunction-»
    «IF id() == "randomWeighted"-»
        double scalarDraw = repast.simphony.random.RandomHelper.nextDouble();
        double currentPortion = 0.0;
        for (int i = 0; currentPortion <= 1.0 && i < weights.length; i++) {
            currentPortion += weights[i];
            if (scalarDraw < currentPortion) {
                return i;
            }
        }
        System.out.println("WARNING: Weights do not add to 1.0: " + currentPortion + ". Using final index value.");
        return weights.length - 1;
    «ELSE»
        «targetDef.proceed()»
    «ENDIF-»
«ENDAROUND»

«DEFINE CustomQueryEval  (List[metaabm::act::AAct] path, ASelect sel) FOR AQuery-»
	«IF !isSpatialControl()-»
	«REM»We have to use dest here.«ENDREM»
		if («dest().id()» instanceof «dest().typeName()») {
            «EXPAND metaabm::tmpl::Java::InnerEvaluation(path, false)-»
			return «expression(path, false)»;
		} else {
			return false;
		}
	«ELSE»
		return true;
	«ENDIF-»
«ENDDEFINE»

«DEFINE QueryBegin(String queryName) FOR AAct»
		repast.simphony.query.Query<Object> «queryName» = new repast.simphony.query.Query<«Object»>() {
            public java.lang.Iterable<«Object»> query() {
«ENDDEFINE»
«DEFINE QueryFilterBegin(String queryName) FOR AAct»
	«EXPAND QueryBegin(queryName)»
		        return new repast.simphony.util.collections.FilteredIterator<Object>(context.iterator(), new org.apache.commons.collections15.Predicate() {
		            public boolean evaluate(Object object) {
«ENDDEFINE»
«DEFINE QueryFilterEnd FOR AAct»
			        }
			    });
	«EXPAND QueryEnd»		       
«ENDDEFINE»
«DEFINE QueryEnd FOR AAct»
            }
            public java.lang.Iterable<Object> query(java.lang.Iterable<Object> other) {
				return new repast.simphony.util.collections.FilteredIterator<Object>(query().iterator(), repast.simphony.query.QueryUtils.createContains(other));
            }
        };
«ENDDEFINE»

«AROUND metaabm::tmpl::Java::ConditionBlock (List[metaabm::act::AAct] path, Boolean inner) FOR AAct-»
	    «IF conditionFor()-»
	        «EXPAND QueryFilterBegin(id() + "QueryCondition")»
            if (object instanceof «dest().typeName()») {
                «selector().typeName()» «selector().id()» = («selector().typeName()») object;
                «IF selector().targets.queries().nonSpatial().size > 0-»
                «EXPAND metaabm::tmpl::Java::InnerEvaluation(path, false)-»
                return «selector().targets.queries().nonSpatial().expressionSink(path, false)»;
                «ELSE-»
                return true;
                «ENDIF-»
            } else {
                return false;
            }
	        «EXPAND QueryFilterEnd»
	    «ENDIF-»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::BeginQueryBlock (List[metaabm::act::AAct] path, Boolean inner) FOR AAct»
    repast.simphony.query.Query<Object> «id()»Query = null;
    «IF (hasControl("neighbor") || hasControl("within"))-»
	    «contingentQuery(hasControl("nearest"), "SpaceFrom")» = new «selfrom().space.queryClass()»(«dest().space.id()», «selector().selfrom().local(selfrom().id()).expl()», «queryParams(selfrom().space, path)»);
    «ENDIF-»
    «IF hasControl("nearest")-»
        «contingentQuery(hasControl("neighbor") || hasControl("within"), "Nearest")» = new repast.simphony.query.Query<«Object»>() {
            public java.lang.Iterable<«Object»> query() {
                return java.util.Collections.EMPTY_LIST;
            }
            public java.lang.Iterable<Object> query(java.lang.Iterable<Object> other) {
                final java.util.Comparator «id()»Comp = new java.util.Comparator<Object>() {
                    public int distance(Object source, Object target) {
                        repast.simphony.space.grid.GridPoint gs = «selfrom().space.id()».getLocation(source); 
                        repast.simphony.space.grid.GridPoint gt = «selfrom().space.id()».getLocation(target); 
                        return Math.min(Math.abs(gs.getX() - gt.getX()), Math.abs(gs.getY() - gt.getY()));
                    }
                    public int compare(Object agent1, Object agent2) {
                        return distance(«selector().selected.selid().expl()», agent1) - distance(«selector().selected.selid().expl()», agent2);
                    }
                };
                final java.util.Collection «id()»List = org.apache.commons.collections15.IteratorUtils.toList(other.iterator());
                final java.util.Collection «id()»Mins = new java.util.ArrayList();
                Object minAgent = java.util.Collections.min(«id()»List, «id()»Comp);
                while (minAgent != null) {
                    «id()»Mins.add(minAgent);
                    «id()»List.remove(minAgent);
                    Object nextAgent = java.util.Collections.min(«id()»List, «id()»Comp);
                    if (nextAgent != null && «id()»Comp.compare(minAgent, nextAgent) == 0) {
                        minAgent = nextAgent;
                    } else {
                        minAgent = null;
                    }
                }
                return «id()»Mins;
            }
        };
        «IF hasControl("neighbor") || hasControl("within")-»
            «id()»Query = new repast.simphony.query.AndQuery<Object>(«id()»QuerySpaceFrom, «id()»QueryNearest);
        «ENDIF-»
    «ENDIF-»
    «IF hasControl("available") || controlCompound().spatial().isEmpty-»
        «EXPAND QueryBegin(id() + "QueryAvailable")»
        return new repast.simphony.util.collections.FilteredIterator<Object>(context.iterator(), new org.apache.commons.collections15.Predicate() {
            public boolean evaluate(Object object) {
                «IF !controlCompound().spatial().isEmpty-»
                repast.simphony.space.grid.GridPoint location = «dest().space.id()».getLocation(object);
                if (location != null) {
                    java.util.Iterator locIter = «dest().space.id()».getObjectsAt(location.toIntArray(null)).iterator();
                    if (locIter.hasNext()) {
                        locIter.next();
                        if (!locIter.hasNext()) {
                            return true;
                        }
                    }
                }
                return false;
                «ELSE»
                return object instanceof «dest().typeName()»;
                «ENDIF-»
            }
        });
        «EXPAND QueryEnd»
        «IF hasControl("neighbor") || hasControl("within")-»
            «id()»Query = new repast.simphony.query.AndQuery<Object>(«id()»Query, «id()»QueryAvailable);
        «ELSE»
            «id()»Query = «id()»QueryAvailable;
        «ENDIF-»
    «ENDIF-»
    «IF !controlCompound().nonSpatial().typeSelect(AQuery).isEmpty && !controlCompound().spatial().isEmpty-»
        «id()»Query = new repast.simphony.query.AndQuery<Object>(«id()»Query, «id()»QueryCondition);
    «ELSEIF !hasControl("available") && !controlCompound().spatial().isEmpty»
        «EXPAND QueryFilterBegin(id() + "Query" + (controlCompound().spatial().size > 0 ? "AgentClass" : ""))»
            return (object instanceof «dest().typeName()»);
        «EXPAND QueryFilterEnd»
        «id()»Query = new repast.simphony.query.AndQuery<Object>(«id()»Query, «id()»QueryAgentClass);
    «ENDIF-»
    «IF metaType != ANone-»
    java.util.Iterator «id()»Iter = «id()»Query.query().iterator();
    if («id()»Iter.hasNext()) {
        java.util.List «id()»List = org.apache.commons.collections15.IteratorUtils.toList(«id()»Iter);
        final «selector().agent.typeName()» «selector().id()» = («selector().agent.typeName()») «id()»List.get(repast.simphony.random.RandomHelper.nextIntFromTo(0, «id()»List.size() - 1));
    «ELSE»
     if (!«id()»Query.query().iterator().hasNext()) {
    «ENDIF-»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::EndQueryBlock (List[metaabm::act::AAct] path, Boolean inner) FOR AAct»
    }
«ENDAROUND»

«DEFINE DimOpen (Integer level) FOR SNDimensional»
	«IF level >= 0-»
		«EXPAND DimOpen (level - 1)»
	for (int d«level» = 0; d«level» < dims.getDimension(«level»); d«level»++) {
	«ENDIF-»
«ENDDEFINE»
«DEFINE DimOpen (Integer level) FOR EObject»«ENDDEFINE»
«DEFINE DimTerm (Integer level) FOR EObject»
	«IF level >= 0-»«EXPAND DimTerm (level - 1)»«IF level > 0»,«ENDIF-»d«level-»«ENDIF-»
«ENDDEFINE»
«DEFINE Close (Integer level) FOR EObject»
	«IF level >= 0-»«EXPAND Close (level - 1)-»}«ENDIF-»
«ENDDEFINE»

«REM»Supress Getters for Arrays -- Reapst doesn't support«ENDREM»
«AROUND metaabm::tmpl::Java::Accessor FOR IID»
		«targetDef.proceed()»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::Builder FOR ABuildGrid»
		//Agents are never actually added automatically
        repast.simphony.space.grid.GridAdder «id()»Adder = new repast.simphony.space.grid.RandomGridAdder();
        repast.simphony.space.grid.GridBuilderParameters params = new repast.simphony.space.grid.GridBuilderParameters(«((SNDimensional) projection).newBorder()», «id()»Adder, true, «projection.dimFieldName()»);
        «projection.fieldName()» = repast.simphony.context.space.grid.GridFactoryFinder.createGridFactory(null).createGrid("«projection.label»", context, params);

	«IF fillAgent != null-»
	    repast.simphony.space.grid.GridDimensions dims = «projection.id()».getDimensions();
	    «LET ((SNDimensional) projection).dimensionality - 1 AS dimN»
	    «EXPAND DimOpen (dimN) FOR projection»
	    int[] nextLoc = {«EXPAND DimTerm (dimN) FOR projection»};
	    «fillAgent.implementation.qualifiedName» «fillAgent.varName()» = new «fillAgent.implementation.qualifiedName»();
		context.add(«fillAgent.varName()»);
	    «projection.id()».moveTo(«fillAgent.varName()», nextLoc);
	    «EXPAND Close(dimN) »
	    «ENDLET»
	«ENDIF-»
«ENDAROUND»

«AROUND metaabm::tmpl::Java::Builder FOR ABuildSpace»
		repast.simphony.space.continuous.ContinuousAdder «id()»Adder = new repast.simphony.space.continuous.RandomCartesianAdder();
		«projection.fieldName()» = repast.simphony.context.space.continuous.ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(null)
			.createContinuousSpace("«label»", context, «id()»Adder, «((SNDimensional) projection).newBorder()», «projection.dimFieldName()»);
«ENDAROUND»

«AROUND metaabm::tmpl::Java::Builder FOR ABuildNetwork»
		«projection.fieldName()» = repast.simphony.context.space.graph.NetworkFactoryFinder.createNetworkFactory(null)
			.createNetwork("«projection.label»", context, «((SNetwork) projection).directed»);
«ENDAROUND»

«AROUND metaabm::tmpl::Java::Builder FOR ABuildGeography»
		repast.simphony.space.gis.GeographyParameters geoParams = new repast.simphony.space.gis.GeographyParameters();
		«projection.fieldName()» = repast.simphony.context.space.gis.GeographyFactoryFinder.createGeographyFactory(null).createGeography("«projection.label»", context, geoParams);
«ENDAROUND»

«AROUND metaabm::tmpl::Java::Builder FOR ACreateAgents»
    «EXPAND metaabm::tmpl::Java::InnerBlock({}, false)-»
    «FOREACH targets.typeSelect(AMethod) AS method»
    «method.body»
    «ENDFOREACH»
«ENDAROUND»

«DEFINE DrawStyle FOR AAct»
        «reference.typeName()» «selector().id()» = («reference.typeName()») object;
		«EXPAND metaabm::tmpl::Java::Block({}, false, true) -»
«ENDDEFINE»
«DEFINE DrawStyle FOR IAct-»«ENDDEFINE»
«DEFINE DrawStyle FOR AGroup-»
	«EXPAND DrawStyle FOREACH roots»
«ENDDEFINE»

«AROUND metaabm::tmpl::Java::Body FOR SStyle»
	«targetDef.proceed()»
	public static final java.awt.Shape SHAPE_OVAL = new java.awt.geom.Ellipse2D.Double(0, 0, 10, 10);
	public static final java.awt.Shape SHAPE_RECT = new java.awt.geom.Rectangle2D.Double(0, 0, 10, 10);
	public static final java.awt.Shape SHAPE_MARKER = new java.awt.geom.Rectangle2D.Double(
			0, 0, 5, 5);
	
	java.awt.Shape shape = SHAPE_RECT;

	public void updateValues(Object object) {
		«IF !agent.isHost()-»
			setBounds(new java.awt.Rectangle(0, 0, 9, 9));
		«ENDIF-»
    	«EXPAND DrawStyle FOR rootActivity-»
	}
	public edu.umd.cs.piccolo.PNode getPNode(Object object, edu.umd.cs.piccolo.PNode node) {
		updateValues(object);
        edu.umd.cs.piccolo.nodes.PPath path = new edu.umd.cs.piccolo.nodes.PPath(shape);
        path.setBounds(getBounds(object));
        return path;
	}
    public java.awt.Paint getPaint(Object object){
		updateValues(object);
		return super.getPaint(object);
    }
«ENDAROUND»

