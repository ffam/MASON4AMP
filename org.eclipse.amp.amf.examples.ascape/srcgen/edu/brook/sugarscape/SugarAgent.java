package edu.brook.sugarscape;

/**
 * Sugar Agent Java Implementation.
 *  A basic sugarscape citizen. Provides basic funtionality for sugarscape agents as well as all desired functionality that could be included in base class without compromising good design or supporting unnecessary member variables. Despite the relativly large size of this class it is actually quite simple; much of the code is simply getters and setters for various initialization paramaters. author Miles T. Parker version 1.0
 * Generated by metaabm system: Sep 16, 2009 7:25:01 PM PDT in project: org.eclipse.amp.amf.examples.ascape  */

public class SugarAgent extends org.ascape.model.CellOccupant {

	/**
	 * 
	 */

	private double sugarStock = 0.0;
	/**
	 * 
	 */

	private int vision = 0;
	/**
	 * 
	 */

	private int sugarMetabolism = 0;
	/**
	 * 
	 */

	private int age = 0;
	/**
	 * 
	 */

	private int deathAge = 0;
	/**
	 * Constructs a new Sugar Agent.
	 */

	public SugarAgent() {
		createUniqueID();
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		//uniqueID = org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			SugarAgent clone = (SugarAgent) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	public GAS_Base getGAS_Base() {
		return (GAS_Base) getScape().getRoot();
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * .
	 */

	public void harvest() {

		{

			SugarCell sugarCell = null;
			org.ascape.model.space.Location sugarCellLocation = ((org.ascape.model.space.Discrete) getGAS_Base()
					.getSugarspace().getSpace()).findRandomNeighbor(this);
			if (sugarCellLocation != null) {
				sugarCell = (SugarCell) ((org.ascape.model.CellOccupant) sugarCellLocation)
						.getHostCell();
			}
			if (sugarCell != null) {

				double sugarCellSugarStockAddSugarAmount = getSugarStock()
						+ sugarCell.getSugarAmount();

				setSugarStock(sugarCellSugarStockAddSugarAmount);
				sugarCell.setSugarAmount(0);

			}

		}

	}
	/**
	 * .
	 */

	public void movement() {

		{

			SugarCell sugarAgent = (SugarCell) ((org.ascape.model.space.Discrete) getGAS_Base()
					.getSugarspace().getSpace()).findRandomAvailable();
			if (sugarAgent != null) {

				moveTo(sugarAgent);

			}

		}

	}
	/**
	 * .
	 */

	public void metabolism() {

		int metabolismIncrementAge = getAge() + 1;

		double metabolismSugarStockSubtractSugarMetabolism = getSugarStock()
				- getSugarMetabolism();

		setAge(metabolismIncrementAge);

		setSugarStock(metabolismSugarStockSubtractSugarMetabolism);

	}
	/**
	 * .
	 */

	public void intializeNonFramework() {

		int randomDeathAge = randomInRange(getGAS_Base().getMinDeathAge(),
				getGAS_Base().getMaxDeathAge());

		int randomVision = randomInRange(getGAS_Base().getMinVision(),
				getGAS_Base().getMaxVision());

		int randomMetabolism = randomInRange(getGAS_Base()
				.getMinSugarMetabolism(), getGAS_Base().getMaxSugarMetabolism());

		int randomSugar = randomInRange(getGAS_Base().getMinInitialSugar(),
				getGAS_Base().getMaxInitialSugar());

		{

			SugarCell randomCell = (SugarCell) ((org.ascape.model.space.Discrete) getGAS_Base()
					.getSugarspace().getSpace()).findRandomAvailable();
			if (randomCell != null) {

				moveTo(randomCell);

			}

		}

		setDeathAge(randomDeathAge);

		int randomAge = randomInRange(0, getDeathAge());

		setAge(randomAge);

		setVision(randomVision);

		setSugarMetabolism(randomMetabolism);

		setSugarStock(randomSugar);

	}

	/**
	 * .
	 */

	public void deathStarvation() {

		if (getSugarStock() <= 0) {

			die();

		}

	}
	/**
	 * .
	 */

	public void deathOldAge() {

		if (getAge() >= getDeathAge()) {

			die();

		}

	}

	/**
	 * Gets the Sugar Stock property for Sugar Agent.
	 * @return 
	 */

	public double getSugarStock() {
		return sugarStock;
	}

	/**
	 * Sets the Sugar Stock property for Sugar Agent.
	 * 
	 * @param _sugarStock the new Sugar Stock value
	 */

	public void setSugarStock(double _sugarStock) {
		sugarStock = _sugarStock;
	}
	/**
	 * Gets the Vision property for Sugar Agent.
	 * @return 
	 */

	public int getVision() {
		return vision;
	}

	/**
	 * Sets the Vision property for Sugar Agent.
	 * 
	 * @param _vision the new Vision value
	 */

	public void setVision(int _vision) {
		vision = _vision;
	}
	/**
	 * Gets the Sugar Metabolism property for Sugar Agent.
	 * @return 
	 */

	public int getSugarMetabolism() {
		return sugarMetabolism;
	}

	/**
	 * Sets the Sugar Metabolism property for Sugar Agent.
	 * 
	 * @param _sugarMetabolism the new Sugar Metabolism value
	 */

	public void setSugarMetabolism(int _sugarMetabolism) {
		sugarMetabolism = _sugarMetabolism;
	}
	/**
	 * Gets the Age property for Sugar Agent.
	 * @return 
	 */

	public int getAge() {
		return age;
	}

	/**
	 * Sets the Age property for Sugar Agent.
	 * 
	 * @param _age the new Age value
	 */

	public void setAge(int _age) {
		age = _age;
	}
	/**
	 * Gets the Death Age property for Sugar Agent.
	 * @return 
	 */

	public int getDeathAge() {
		return deathAge;
	}

	/**
	 * Sets the Death Age property for Sugar Agent.
	 * 
	 * @param _deathAge the new Death Age value
	 */

	public void setDeathAge(int _deathAge) {
		deathAge = _deathAge;
	}

	public String getName() {
		if (name == null) {
			return "Sugar Agent " + uniqueID;
		} else {
			return name;
		}
	}
}
