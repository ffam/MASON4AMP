package org.metaabm.gen.test;

/**
 * Complex Movement Agent Java Implementation.
 * 
 * Generated by metaabm system: May 13, 2009 11:53:44 AM PDT in project: org.metaabm.gen.ascape.test  (testing) */

import static org.junit.Assert.assertTrue;

public class ComplexMovementAgent extends org.ascape.model.CellOccupant {

	/**
	 * 
	 */

	private boolean someBoolean = false;
	/**
	 * 
	 */

	private double[] withinSpace = {1, 1, 3, 3};
	/**
	 * 
	 */

	private int result = 0;
	/**
	 * 
	 */

	private SpatialStateEnum spatialState = SpatialStateEnum.option1;
	/**
	 * 
	 */

	private int vision = 4;
	/**
	 * Constructs a new Complex Movement Agent.
	 */

	public ComplexMovementAgent() {
		createUniqueID();
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			ComplexMovementAgent clone = (ComplexMovementAgent) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	public SpatialModel getSpatialModel() {
		return (SpatialModel) getScape().getRoot();
	}

	public java.util.List getNetwork() {
		return ((org.ascape.model.space.Graph) getSpatialModel()
				.getComplexNet().getSpace()).getNeighborsFor(this);
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testDieAll() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testDieAll_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional dieRandomAgentCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object dieRandomAgentCell) {
					dieRandomAgentCell = ((org.ascape.model.HostCell) dieRandomAgentCell)
							.getOccupant();
					if (dieRandomAgentCell instanceof ComplexMovementAgent) {
						ComplexMovementAgent dieRandomAgent = (ComplexMovementAgent) dieRandomAgentCell;
						return true;
					} else {
						return false;
					}
				}
			};

			ComplexMovementAgent dieRandomAgent = null;
			org.ascape.model.space.Location dieRandomAgentLocation = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace())
					.findRandom(dieRandomAgentCondition);
			if (dieRandomAgentLocation != null) {
				dieRandomAgent = (ComplexMovementAgent) ((org.ascape.model.HostCell) dieRandomAgentLocation)
						.getOccupant();
			}
			if (dieRandomAgent != null) {

				dieRandomAgent.die();

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testDieAll_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testNegateSpatialThenIdentity() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testNegateSpatialThenIdentity_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			ComplexLocation locationGoodMove = null;
			org.ascape.model.space.Location locationGoodMoveLocation = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace()).findRandomNeighbor(this);
			if (locationGoodMoveLocation != null) {
				locationGoodMove = (ComplexLocation) ((org.ascape.model.CellOccupant) locationGoodMoveLocation)
						.getHostCell();
			}
			if (locationGoodMove != null) {

				if (locationGoodMove.isLocationGood()) {

					moveTo(locationGoodMove);

				}

				if (!(locationGoodMove.isLocationGood())) {

					setSomeBoolean(true);

				}

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testNegateSpatialThenIdentity_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testNegateSpatialWithIdentity() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testNegateSpatialWithIdentity_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional moverNotNeighborCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object moverNotNeighborCell) {
					if (moverNotNeighborCell instanceof ComplexMovementAgent) {
						ComplexMovementAgent moverNotNeighbor = (ComplexMovementAgent) moverNotNeighborCell;
						return true;
					} else {
						return false;
					}
				}
			};

			ComplexMovementAgent moverNotNeighbor = (ComplexMovementAgent) ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace()).findRandomNeighbor(this,
					moverNotNeighborCondition);
			if (moverNotNeighbor == null) {

				setSomeBoolean(true);

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testNegateSpatialWithIdentity_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testHostHere() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testHostHere_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			ComplexLocation location = null;
			org.ascape.model.space.Location locationLocation = this;
			if (locationLocation != null) {
				location = (ComplexLocation) ((org.ascape.model.CellOccupant) locationLocation)
						.getHostCell();
			}
			if (location != null) {

				location.setLocationGood(true);

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testHostHere_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testConnectRandomOther() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testConnectRandomOther_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional complexMovementAgentCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object complexMovementAgentCell) {
					complexMovementAgentCell = ((org.ascape.model.HostCell) complexMovementAgentCell)
							.getOccupant();
					if (complexMovementAgentCell instanceof ComplexMovementAgent) {
						ComplexMovementAgent complexMovementAgent = (ComplexMovementAgent) complexMovementAgentCell;
						return true;
					} else {
						return false;
					}
				}
			};

			ComplexMovementAgent complexMovementAgent = null;
			org.ascape.model.space.Location complexMovementAgentLocation = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace())
					.findRandom(complexMovementAgentCondition);
			if (complexMovementAgentLocation != null) {
				complexMovementAgent = (ComplexMovementAgent) ((org.ascape.model.HostCell) complexMovementAgentLocation)
						.getOccupant();
			}
			if (complexMovementAgent != null) {

				((org.ascape.model.space.Graph) getSpatialModel()
						.getComplexNet().getSpace()).addNeighborSafe(this,
						complexMovementAgent, true);

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testConnectRandomOther_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSetRandomOther() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testSetRandomOther_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional complexMovementAgentCopyCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(
						Object complexMovementAgentCopyCell) {
					complexMovementAgentCopyCell = ((org.ascape.model.HostCell) complexMovementAgentCopyCell)
							.getOccupant();
					if (complexMovementAgentCopyCell instanceof ComplexMovementAgent) {
						ComplexMovementAgent complexMovementAgentCopy = (ComplexMovementAgent) complexMovementAgentCopyCell;
						return true;
					} else {
						return false;
					}
				}
			};

			ComplexMovementAgent complexMovementAgentCopy = null;
			org.ascape.model.space.Location complexMovementAgentCopyLocation = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace())
					.findRandom(complexMovementAgentCopyCondition);
			if (complexMovementAgentCopyLocation != null) {
				complexMovementAgentCopy = (ComplexMovementAgent) ((org.ascape.model.HostCell) complexMovementAgentCopyLocation)
						.getOccupant();
			}
			if (complexMovementAgentCopy != null) {

				complexMovementAgentCopy.setSomeBoolean(true);

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testSetRandomOther_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSetRandomOtherIf() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testSetRandomOtherIf_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional complexMovementAgentCopyCopyCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(
						Object complexMovementAgentCopyCopyCell) {
					complexMovementAgentCopyCopyCell = ((org.ascape.model.HostCell) complexMovementAgentCopyCopyCell)
							.getOccupant();
					if (complexMovementAgentCopyCopyCell instanceof ComplexMovementAgent) {
						ComplexMovementAgent complexMovementAgentCopyCopy = (ComplexMovementAgent) complexMovementAgentCopyCopyCell;
						return true;
					} else {
						return false;
					}
				}
			};

			ComplexMovementAgent complexMovementAgentCopyCopy = null;
			org.ascape.model.space.Location complexMovementAgentCopyCopyLocation = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace())
					.findRandom(complexMovementAgentCopyCopyCondition);
			if (complexMovementAgentCopyCopyLocation != null) {
				complexMovementAgentCopyCopy = (ComplexMovementAgent) ((org.ascape.model.HostCell) complexMovementAgentCopyCopyLocation)
						.getOccupant();
			}
			if (complexMovementAgentCopyCopy != null) {

				if (complexMovementAgentCopyCopy.isSomeBoolean()) {

					complexMovementAgentCopyCopy.setSomeBoolean(false);

				}

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testSetRandomOtherIf_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSetRandomPostQuery() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testSetRandomPostQuery_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		boolean testSetRandomPostQueryRandomBoolean = getRandom().nextBoolean();

		if (isSomeBoolean()) {

			{
				org.ascape.util.Conditional complexMovementAgentCopyCopyCopyCondition = new org.ascape.util.Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;

					public boolean meetsCondition(
							Object complexMovementAgentCopyCopyCopyCell) {
						complexMovementAgentCopyCopyCopyCell = ((org.ascape.model.HostCell) complexMovementAgentCopyCopyCopyCell)
								.getOccupant();
						if (complexMovementAgentCopyCopyCopyCell instanceof ComplexMovementAgent) {
							ComplexMovementAgent complexMovementAgentCopyCopyCopy = (ComplexMovementAgent) complexMovementAgentCopyCopyCopyCell;
							return true;
						} else {
							return false;
						}
					}
				};

				ComplexMovementAgent complexMovementAgentCopyCopyCopy = null;
				org.ascape.model.space.Location complexMovementAgentCopyCopyCopyLocation = ((org.ascape.model.space.Discrete) getSpatialModel()
						.getGrid2D().getSpace())
						.findRandom(complexMovementAgentCopyCopyCopyCondition);
				if (complexMovementAgentCopyCopyCopyLocation != null) {
					complexMovementAgentCopyCopyCopy = (ComplexMovementAgent) ((org.ascape.model.HostCell) complexMovementAgentCopyCopyCopyLocation)
							.getOccupant();
				}
				if (complexMovementAgentCopyCopyCopy != null) {

					complexMovementAgentCopyCopyCopy.setSomeBoolean(true);

				}

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testSetRandomPostQuery_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}

	/**
	 * .
	 */

	@org.junit.Test
	public void testParallelSpatial() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testParallelSpatial_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			ComplexLocation parallelSelect1 = null;
			org.ascape.model.space.Location parallelSelect1Location = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace()).findRandomNeighbor(this);
			if (parallelSelect1Location != null) {
				parallelSelect1 = (ComplexLocation) ((org.ascape.model.CellOccupant) parallelSelect1Location)
						.getHostCell();
			}
			if (parallelSelect1 != null) {

				moveTo(parallelSelect1);

			}

		}

		{

			ComplexLocation parallelSelect2 = null;
			org.ascape.model.space.Location parallelSelect2Location = ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace()).findRandomNeighbor(this);
			if (parallelSelect2Location != null) {
				parallelSelect2 = (ComplexLocation) ((org.ascape.model.CellOccupant) parallelSelect2Location)
						.getHostCell();
			}
			if (parallelSelect2 != null) {

				moveTo(parallelSelect2);

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testParallelSpatial_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testParallelRoot() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testParallelRoot_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			{

				{

					int testParallelRootResultAddUnit = getResult() + 1;

					setResult(testParallelRootResultAddUnit);

					int testParallelRootResultAddUnitCopy = getResult() + 1;

					setResult(getResult() + 1);

					int testParallelRootResultAddUnitCopyCopy = getResult() + 1;

					setResult(getResult() + 1);

				}
			}
		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testParallelRoot_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}

	/**
	 * .
	 */

	@org.junit.Test
	public void testParallelWithNetwork() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testParallelWithNetwork_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional parallelNetwork1Condition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object parallelNetwork1Cell) {
					if (parallelNetwork1Cell instanceof ComplexMovementAgent) {
						ComplexMovementAgent parallelNetwork1 = (ComplexMovementAgent) parallelNetwork1Cell;
						return true;
					} else {
						return false;
					}
				}
			};

			ComplexMovementAgent parallelNetwork1 = (ComplexMovementAgent) ((org.ascape.model.space.Discrete) getSpatialModel()
					.getComplexNet().getSpace()).findRandomNeighbor(this,
					parallelNetwork1Condition);
			if (parallelNetwork1 != null) {

				((org.ascape.model.space.Graph) getSpatialModel()
						.getComplexNet().getSpace()).addNeighborSafe(this,
						parallelNetwork1, false);

			}

		}

		{

			ComplexLocation parallelMovement = (ComplexLocation) ((org.ascape.model.space.Discrete) getSpatialModel()
					.getGrid2D().getSpace()).findRandomAvailable();
			if (parallelMovement != null) {

				moveTo(parallelMovement);

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testParallelWithNetwork_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testNestedStatements() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testNestedStatements_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			{

				if (getSpatialState() == SpatialStateEnum.option1
						&& isSomeBoolean() == false) {

					{
						org.ascape.util.Conditional targetLocationCondition = new org.ascape.util.Conditional() {
							private static final long serialVersionUID = 6846144446402098985L;

							public boolean meetsCondition(
									Object targetLocationCell) {
								targetLocationCell = targetLocationCell;
								if (targetLocationCell instanceof ComplexLocation) {
									ComplexLocation targetLocation = (ComplexLocation) targetLocationCell;
									return (targetLocation.isLocationGood());
								} else {
									return false;
								}
							}
						};

						ComplexLocation targetLocation = (ComplexLocation) ((org.ascape.model.space.Discrete) getSpatialModel()
								.getGrid2D().getSpace()).findRandomWithin(
								((org.ascape.model.CellOccupant) this)
										.getHostCell(),
								targetLocationCondition, false, getVision());
						if (targetLocation != null) {

							setSomeBoolean(true);

						}

					}

				}

			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testNestedStatements_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testHostHereCondition() {

		/*PROTECTED REGION ID(ComplexMovementAgent_testHostHereCondition_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			ComplexLocation complexMovementAgentCopyCopyCopyCopy = null;
			org.ascape.model.space.Location complexMovementAgentCopyCopyCopyCopyLocation = this;
			if (complexMovementAgentCopyCopyCopyCopyLocation != null) {
				complexMovementAgentCopyCopyCopyCopy = (ComplexLocation) ((org.ascape.model.CellOccupant) complexMovementAgentCopyCopyCopyCopyLocation)
						.getHostCell();
			}
			if (complexMovementAgentCopyCopyCopyCopy != null) {
				if (complexMovementAgentCopyCopyCopyCopy.isLocationGood()) {

					setSomeBoolean(true);

				}
			}

		}

		/*PROTECTED REGION ID(ComplexMovementAgent_testHostHereCondition_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}

	/**
	 * .
	 */

	@org.junit.Test
	public boolean withinBoundaries(double[] bounds) {

		org.ascape.model.space.Coordinate2DDiscrete coor = (org.ascape.model.space.Coordinate2DDiscrete) getCoordinate();
		return (coor.getYValue() >= bounds[0] && coor.getXValue() >= bounds[1]
				&& coor.getYValue() <= bounds[2] && coor.getXValue() <= bounds[3]);

	}
	/**
	 * Gets the Some Boolean property for Complex Movement Agent.
	 * @return 
	 */

	public boolean isSomeBoolean() {
		return someBoolean;
	}

	/**
	 * Sets the Some Boolean property for Complex Movement Agent.
	 * 
	 * @param _someBoolean the new Some Boolean value
	 */

	public void setSomeBoolean(boolean _someBoolean) {
		someBoolean = _someBoolean;
	}
	/**
	 * Gets the Within Space property for Complex Movement Agent.
	 * @return 
	 */

	public double[] getWithinSpace() {
		return withinSpace;
	}

	/**
	 * Sets the Within Space property for Complex Movement Agent.
	 * 
	 * @param _withinSpace the new Within Space value
	 */

	public void setWithinSpace(double[] _withinSpace) {
		withinSpace = _withinSpace;
	}
	/**
	 * Gets the Result property for Complex Movement Agent.
	 * @return 
	 */

	public int getResult() {
		return result;
	}

	/**
	 * Sets the Result property for Complex Movement Agent.
	 * 
	 * @param _result the new Result value
	 */

	public void setResult(int _result) {
		result = _result;
	}
	/**
	 * Gets the Spatial State property for Complex Movement Agent.
	 * @return 
	 */

	public SpatialStateEnum getSpatialState() {
		return spatialState;
	}

	/**
	 * Sets the Spatial State property for Complex Movement Agent.
	 * 
	 * @param _spatialState the new Spatial State value
	 */

	public void setSpatialState(SpatialStateEnum _spatialState) {
		spatialState = _spatialState;
	}
	/**
	 * Gets the Vision property for Complex Movement Agent.
	 * @return 
	 */

	public int getVision() {
		return vision;
	}

	/**
	 * Sets the Vision property for Complex Movement Agent.
	 * 
	 * @param _vision the new Vision value
	 */

	public void setVision(int _vision) {
		vision = _vision;
	}

	public String getName() {
		if (name == null) {
			return "Complex Movement Agent " + uniqueID;
		} else {
			return name;
		}
	}
}
