package org.metaabm.gen.test;

/**
 * Basic Model Java Implementation.
 * 
 * Generated by metaabm system: May 13, 2009 11:53:47 AM PDT in project: org.metaabm.gen.ascape.test  (testing) */

import static org.junit.Assert.assertTrue;

public class BasicModel extends org.ascape.model.Scape {

	/**
	 * 
	 */

	private boolean someFlag = true;
	/**
	 * The number of generated member agents to create.
	 */

	private int generatedMemberAgentCount = 10;
	/**
	 * 
	 */

	private int someInteger = 45;
	/**
	 * 
	 */

	private double someFloat = 1.8;
	/**
	 * The number of operations agents to create.
	 */

	private int operationsAgentCount = 0;
	/**
	 * The number of state agents to create.
	 */

	private int stateAgentCount = 0;
	/**
	 * The number of methods agents to create.
	 */

	private int methodsAgentCount = 0;
	/**
	 * Constructs a new Basic Model.
	 */

	public BasicModel() {
		createUniqueID();
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			BasicModel clone = (BasicModel) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	/**
	 * 
	 */

	private org.ascape.model.Scape operationsAgentList = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape stateAgentList = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape methodsAgentList = null;

	/**
	 * Gets the Operations Agent property for Basic Model.
	 * @return 
	 */

	public org.ascape.model.Scape getOperationsAgent() {
		return operationsAgentList;
	}

	/**
	 * Sets the Operations Agent property for Basic Model.
	 * 
	 * @param _operationsAgent the new Operations Agent value
	 */

	public void setOperationsAgent(org.ascape.model.Scape _operationsAgent) {
		operationsAgentList = _operationsAgent;
	}
	/**
	 * Gets the State Agent property for Basic Model.
	 * @return 
	 */

	public org.ascape.model.Scape getStateAgent() {
		return stateAgentList;
	}

	/**
	 * Sets the State Agent property for Basic Model.
	 * 
	 * @param _stateAgent the new State Agent value
	 */

	public void setStateAgent(org.ascape.model.Scape _stateAgent) {
		stateAgentList = _stateAgent;
	}
	/**
	 * Gets the Methods Agent property for Basic Model.
	 * @return 
	 */

	public org.ascape.model.Scape getMethodsAgent() {
		return methodsAgentList;
	}

	/**
	 * Sets the Methods Agent property for Basic Model.
	 * 
	 * @param _methodsAgent the new Methods Agent value
	 */

	public void setMethodsAgent(org.ascape.model.Scape _methodsAgent) {
		methodsAgentList = _methodsAgent;
	}

	/**
	 * Creates the members of Basic Model. 
	 */
	public void createScape() {
		super.createScape();
		setName(toString());

		OperationsAgent operationsAgentProto = new OperationsAgent();
		operationsAgentList = new org.ascape.model.Scape();
		operationsAgentList.setName("Operations Agent");
		operationsAgentList.setPrototypeAgent(operationsAgentProto);
		operationsAgentList
				.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		StateAgent stateAgentProto = new StateAgent();
		stateAgentList = new org.ascape.model.Scape();
		stateAgentList.setName("State Agent");
		stateAgentList.setPrototypeAgent(stateAgentProto);
		stateAgentList.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		MethodsAgent methodsAgentProto = new MethodsAgent();
		methodsAgentList = new org.ascape.model.Scape();
		methodsAgentList.setName("Methods Agent");
		methodsAgentList.setPrototypeAgent(methodsAgentProto);
		methodsAgentList.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		add(operationsAgentList);

		add(stateAgentList);

		add(methodsAgentList);

		operationsAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"Operations Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		operationsAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Operations Agent Float 12") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final double getValue(Object operationsAgent) {
						return ((OperationsAgent) operationsAgent).getFloat12();
					}
				});
		operationsAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCondCSAMM(
						"Operations Agent Result Boolean") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final boolean meetsCondition(Object operationsAgent) {
						return ((OperationsAgent) operationsAgent)
								.isResultBoolean();
					}
				});

		stateAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"State Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		stateAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCondCSAMM(
						"State Agent Red Primary Color") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final boolean meetsCondition(Object stateAgent) {
						return PrimaryColorEnum.red == ((StateAgent) stateAgent)
								.getPrimaryColor();
					}
				});
		stateAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCondCSAMM(
						"State Agent Yellow Primary Color") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final boolean meetsCondition(Object stateAgent) {
						return PrimaryColorEnum.yellow == ((StateAgent) stateAgent)
								.getPrimaryColor();
					}
				});
		stateAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCondCSAMM(
						"State Agent Blue Primary Color") {
					private static final long serialVersionUID = 6846144446402098985L;
					public final boolean meetsCondition(Object stateAgent) {
						return PrimaryColorEnum.blue == ((StateAgent) stateAgent)
								.getPrimaryColor();
					}
				});

		methodsAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"Methods Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Simple Condition") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testSimpleCondition();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Simple Conjunction") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testSimpleConjunction();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Simple Math") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testSimpleMath();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Complex Math") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testComplexMath();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Simple OR") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testSimpleOR();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Literals") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testLiterals();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testNegate();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Identity") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testIdentity();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate Complex") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testNegateComplex();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Complex Conjunction") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testComplexConjunction();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Exclusive Conjunctions") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testExclusiveConjunctions();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Multiple Paths") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testMultiplePaths();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate Same Target") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testNegateSameTarget();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate Multiple Targets") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testNegateMultipleTargets();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate Or") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a).testNegateOr();
			}
		});
		operationsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Nested Condition") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.OperationsAgent) a)
						.testNestedCondition();
			}
		});
		stateAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Set State To Yellow") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.StateAgent) a).testSetStateToYellow();
			}
		});
		methodsAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Methods Agent Rule") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.MethodsAgent) a).testMethodsAgentRule();
			}
		});

	}

	/**
	 * Creates UI views for Basic Model.
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		{
		}
		{
			org.ascape.view.vis.ChartView chart = new org.ascape.view.vis.ChartView();
			addView(chart);
			if (getRunner().getEnvironment() instanceof org.ascape.runtime.applet.AppletEnvironment) {
				chart.getChart().getLegend().setAnchor(
						com.jrefinery.chart.Legend.SOUTH);
			}
			java.awt.Graphics dummyGraphics = new java.awt.image.BufferedImage(
					10, 10, java.awt.image.BufferedImage.TYPE_INT_RGB)
					.getGraphics();

			org.ascape.model.Scape operationsAgentScape = new BasicModel();
			operationsAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			OperationsAgent operationsAgent = new OperationsAgent() {
				public void requestUpdate() {
				}
			};
			operationsAgentScape.add(operationsAgent);

			org.ascape.model.HostCell operationsAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			operationsAgentHost
					.setOccupant((org.ascape.model.CellOccupant) operationsAgent);

			org.ascape.model.Scape stateAgentScape = new BasicModel();
			stateAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			StateAgent stateAgent = new StateAgent() {
				public void requestUpdate() {
				}
			};
			stateAgentScape.add(stateAgent);

			org.ascape.model.HostCell stateAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			stateAgentHost
					.setOccupant((org.ascape.model.CellOccupant) stateAgent);

			org.ascape.model.Scape methodsAgentScape = new BasicModel();
			methodsAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			MethodsAgent methodsAgent = new MethodsAgent() {
				public void requestUpdate() {
				}
			};
			methodsAgentScape.add(methodsAgent);

			org.ascape.model.HostCell methodsAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			methodsAgentHost
					.setOccupant((org.ascape.model.CellOccupant) methodsAgent);

		}
	}

	public void scapeSetup(org.ascape.model.event.ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		operationsAgentList.setSize(operationsAgentCount);
		stateAgentList.setSize(stateAgentCount);
		methodsAgentList.setSize(methodsAgentCount);
	}

	public static void main(String[] args) {
		(new org.ascape.runtime.swing.SwingRunner()).open(
				"org.eclipse.amp.amf.gen.test.BasicModel", args);
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testFake() {

		/*PROTECTED REGION ID(BasicModel_testFake_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		assertTrue(true);

		/*PROTECTED REGION ID(BasicModel_testFake_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * Gets the Some Flag property for Basic Model.
	 * @return 
	 */

	public boolean isSomeFlag() {
		return someFlag;
	}

	/**
	 * Sets the Some Flag property for Basic Model.
	 * 
	 * @param _someFlag the new Some Flag value
	 */

	public void setSomeFlag(boolean _someFlag) {
		someFlag = _someFlag;
	}
	/**
	 * Gets the Generated Member Agent Count property for Basic Model.
	 * @return The number of generated member agents to create.
	 */

	public int getGeneratedMemberAgentCount() {
		return generatedMemberAgentCount;
	}

	/**
	 * Sets the Generated Member Agent Count property for Basic Model.
	 * The number of generated member agents to create.
	 * @param _generatedMemberAgentCount the new Generated Member Agent Count value
	 */

	public void setGeneratedMemberAgentCount(int _generatedMemberAgentCount) {
		generatedMemberAgentCount = _generatedMemberAgentCount;
	}
	/**
	 * Gets the Some Integer property for Basic Model.
	 * @return 
	 */

	public int getSomeInteger() {
		return someInteger;
	}

	/**
	 * Sets the Some Integer property for Basic Model.
	 * 
	 * @param _someInteger the new Some Integer value
	 */

	public void setSomeInteger(int _someInteger) {
		someInteger = _someInteger;
	}
	/**
	 * Gets the Some Float property for Basic Model.
	 * @return 
	 */

	public double getSomeFloat() {
		return someFloat;
	}

	/**
	 * Sets the Some Float property for Basic Model.
	 * 
	 * @param _someFloat the new Some Float value
	 */

	public void setSomeFloat(double _someFloat) {
		someFloat = _someFloat;
	}
	/**
	 * Gets the Operations Agent Count property for Basic Model.
	 * @return The number of operations agents to create.
	 */

	public int getOperationsAgentCount() {
		return operationsAgentCount;
	}

	/**
	 * Sets the Operations Agent Count property for Basic Model.
	 * The number of operations agents to create.
	 * @param _operationsAgentCount the new Operations Agent Count value
	 */

	public void setOperationsAgentCount(int _operationsAgentCount) {
		operationsAgentCount = _operationsAgentCount;
	}
	/**
	 * Gets the State Agent Count property for Basic Model.
	 * @return The number of state agents to create.
	 */

	public int getStateAgentCount() {
		return stateAgentCount;
	}

	/**
	 * Sets the State Agent Count property for Basic Model.
	 * The number of state agents to create.
	 * @param _stateAgentCount the new State Agent Count value
	 */

	public void setStateAgentCount(int _stateAgentCount) {
		stateAgentCount = _stateAgentCount;
	}
	/**
	 * Gets the Methods Agent Count property for Basic Model.
	 * @return The number of methods agents to create.
	 */

	public int getMethodsAgentCount() {
		return methodsAgentCount;
	}

	/**
	 * Sets the Methods Agent Count property for Basic Model.
	 * The number of methods agents to create.
	 * @param _methodsAgentCount the new Methods Agent Count value
	 */

	public void setMethodsAgentCount(int _methodsAgentCount) {
		methodsAgentCount = _methodsAgentCount;
	}

	public String getName() {
		if (name == null) {
			return "Basic Model " + uniqueID;
		} else {
			return name;
		}
	}
}
