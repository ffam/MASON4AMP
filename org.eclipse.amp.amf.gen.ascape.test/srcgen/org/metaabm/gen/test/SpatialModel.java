package org.metaabm.gen.test;

/**
 * Spatial Model Java Implementation.
 * 
 * Generated by metaabm system: May 13, 2009 11:53:44 AM PDT in project: org.metaabm.gen.ascape.test  (testing) */

import static org.junit.Assert.assertTrue;

public class SpatialModel extends org.ascape.model.Scape {

	/**
	 * The number of complex movement agents to create.
	 */

	private int complexMovementAgentCount = 1;
	/**
	 * The number of complex locations to create.
	 */

	private int complexLocationCount = 0;
	/**
	 * The number of spatial model agents to create.
	 */

	private int spatialModelAgentCount = 0;
	/**
	 * 
	 */

	private double[] goodBoundary = {1, 1, 4, 4};
	/**
	 * The size of each dimension.
	 */

	private int[] grid2DDimensions = new int[2];
	/**
	 * 
	 */

	private org.ascape.model.Scape grid2D = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape complexNet = null;
	/**
	 * Constructs a new Spatial Model.
	 */

	public SpatialModel() {
		createUniqueID();
		setGrid2DWidth(20);
		setGrid2DHeight(20);
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			SpatialModel clone = (SpatialModel) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	/**
	 * 
	 */

	private org.ascape.model.Scape complexMovementAgentList = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape complexLocationList = null;

	/**
	 * Gets the Complex Movement Agent property for Spatial Model.
	 * @return 
	 */

	public org.ascape.model.Scape getComplexMovementAgent() {
		return complexMovementAgentList;
	}

	/**
	 * Sets the Complex Movement Agent property for Spatial Model.
	 * 
	 * @param _complexMovementAgent the new Complex Movement Agent value
	 */

	public void setComplexMovementAgent(
			org.ascape.model.Scape _complexMovementAgent) {
		complexMovementAgentList = _complexMovementAgent;
	}
	/**
	 * Gets the Complex Location property for Spatial Model.
	 * @return 
	 */

	public org.ascape.model.Scape getComplexLocation() {
		return complexLocationList;
	}

	/**
	 * Sets the Complex Location property for Spatial Model.
	 * 
	 * @param _complexLocation the new Complex Location value
	 */

	public void setComplexLocation(org.ascape.model.Scape _complexLocation) {
		complexLocationList = _complexLocation;
	}

	/**
	 * Creates the members of Spatial Model. 
	 */
	public void createScape() {
		super.createScape();
		setName(toString());

		ComplexMovementAgent complexMovementAgentProto = new ComplexMovementAgent();
		complexMovementAgentList = new org.ascape.model.Scape();
		complexMovementAgentList.setName("Complex Movement Agent");
		complexMovementAgentList.setPrototypeAgent(complexMovementAgentProto);
		complexMovementAgentList
				.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		grid2D = new org.ascape.model.Scape(
				new org.ascape.model.space.Array2DEuclidian());
		grid2D.setPrototypeAgent(new ComplexLocation());
		grid2D.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getGrid2DDimensions()));
		grid2D.setName("Build Grid");
		((org.ascape.model.space.CollectionSpace) grid2D.getSpace())
				.setPeriodic(true);
		add(grid2D);
		org.ascape.model.Scape complexLocationList = grid2D;
		complexNet = new org.ascape.model.Scape(
				new org.ascape.model.space.Graph());
		complexNet.setName("Build Net");
		add(complexNet);

		add(complexMovementAgentList);

		complexMovementAgentProto.setHostScape(grid2D);

		complexMovementAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"Complex Movement Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Die All") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a).testDieAll();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate Spatial Then Identity") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testNegateSpatialThenIdentity();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Negate Spatial With Identity") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testNegateSpatialWithIdentity();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Host Here") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a).testHostHere();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Connect Random Other") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testConnectRandomOther();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Set Random Other") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testSetRandomOther();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Set Random Other If") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testSetRandomOtherIf();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Set Random Post Query") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testSetRandomPostQuery();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Parallel Spatial") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testParallelSpatial();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Parallel Root") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testParallelRoot();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Parallel With Network") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testParallelWithNetwork();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Nested Statements") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testNestedStatements();
			}
		});
		complexMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Test Host Here Condition") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexMovementAgent) a)
						.testHostHereCondition();
			}
		});
		complexLocationList.addRule(new org.ascape.model.rule.Rule(
				"Test Self Available Create") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexLocation) a)
						.testSelfAvailableCreate();
			}
		});
		complexLocationList.addRule(new org.ascape.model.rule.Rule(
				"Test Self Available Within") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexLocation) a)
						.testSelfAvailableWithin();
			}
		});
		complexLocationList.addRule(new org.ascape.model.rule.Rule(
				"Test Agent Here") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexLocation) a).testAgentHere();
			}
		});
		complexLocationList.addRule(new org.ascape.model.rule.Rule(
				"Test Self Available") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexLocation) a).testSelfAvailable();
			}
		});
		complexLocationList.addRule(new org.ascape.model.rule.Rule(
				"Test Self Within Bounds") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.ComplexLocation) a)
						.testSelfWithinBounds();
			}
		});

	}

	/**
	 * Creates UI views for Spatial Model.
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		{
			org.ascape.view.vis.Overhead2DView grid2DView = new org.ascape.view.vis.Overhead2DView();
			grid2DView.setAgentSize(20);
			grid2D.addView(grid2DView);
			grid2DView.setDrawNetwork(true);
			grid2DView.getDrawSelection().setSelected(
					grid2DView.agents_oval_cells_draw_feature, false);
			grid2DView.getDrawSelection().setSelected(
					grid2DView.cells_fill_draw_feature, true);
			grid2DView.getDrawSelection().moveToFront(
					grid2DView.cells_fill_draw_feature);
		}
		{
			org.ascape.view.vis.ChartView chart = new org.ascape.view.vis.ChartView();
			addView(chart);
			if (getRunner().getEnvironment() instanceof org.ascape.runtime.applet.AppletEnvironment) {
				chart.getChart().getLegend().setAnchor(
						com.jrefinery.chart.Legend.SOUTH);
			}
			java.awt.Graphics dummyGraphics = new java.awt.image.BufferedImage(
					10, 10, java.awt.image.BufferedImage.TYPE_INT_RGB)
					.getGraphics();

			org.ascape.model.Scape complexMovementAgentScape = new SpatialModel();
			complexMovementAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			ComplexMovementAgent complexMovementAgent = new ComplexMovementAgent() {
				public void requestUpdate() {
				}
			};
			complexMovementAgentScape.add(complexMovementAgent);

			org.ascape.model.HostCell complexMovementAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			complexMovementAgentHost
					.setOccupant((org.ascape.model.CellOccupant) complexMovementAgent);

			org.ascape.model.Scape complexLocationScape = new SpatialModel();
			complexLocationScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			ComplexLocation complexLocation = new ComplexLocation() {
				public void requestUpdate() {
				}
			};
			complexLocationScape.add(complexLocation);

		}
	}

	public void scapeSetup(org.ascape.model.event.ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		complexMovementAgentList.setSize(complexMovementAgentCount);
	}

	public static void main(String[] args) {
		(new org.ascape.runtime.swing.SwingRunner()).open(
				"org.eclipse.amp.amf.gen.test.SpatialModel", args);
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * Gets the Complex Movement Agent Count property for Spatial Model.
	 * @return The number of complex movement agents to create.
	 */

	public int getComplexMovementAgentCount() {
		return complexMovementAgentCount;
	}

	/**
	 * Sets the Complex Movement Agent Count property for Spatial Model.
	 * The number of complex movement agents to create.
	 * @param _complexMovementAgentCount the new Complex Movement Agent Count value
	 */

	public void setComplexMovementAgentCount(int _complexMovementAgentCount) {
		complexMovementAgentCount = _complexMovementAgentCount;
	}
	/**
	 * Gets the Complex Location Count property for Spatial Model.
	 * @return The number of complex locations to create.
	 */

	public int getComplexLocationCount() {
		return complexLocationCount;
	}

	/**
	 * Sets the Complex Location Count property for Spatial Model.
	 * The number of complex locations to create.
	 * @param _complexLocationCount the new Complex Location Count value
	 */

	public void setComplexLocationCount(int _complexLocationCount) {
		complexLocationCount = _complexLocationCount;
	}
	/**
	 * Gets the Spatial Model Agent Count property for Spatial Model.
	 * @return The number of spatial model agents to create.
	 */

	public int getSpatialModelAgentCount() {
		return spatialModelAgentCount;
	}

	/**
	 * Sets the Spatial Model Agent Count property for Spatial Model.
	 * The number of spatial model agents to create.
	 * @param _spatialModelAgentCount the new Spatial Model Agent Count value
	 */

	public void setSpatialModelAgentCount(int _spatialModelAgentCount) {
		spatialModelAgentCount = _spatialModelAgentCount;
	}
	/**
	 * Gets the Good Boundary property for Spatial Model.
	 * @return 
	 */

	public double[] getGoodBoundary() {
		return goodBoundary;
	}

	/**
	 * Sets the Good Boundary property for Spatial Model.
	 * 
	 * @param _goodBoundary the new Good Boundary value
	 */

	public void setGoodBoundary(double[] _goodBoundary) {
		goodBoundary = _goodBoundary;
	}
	/**
	 * Gets the Dimensions property for Grid 2D.
	 * @return The size of each dimension.
	 */

	public int[] getGrid2DDimensions() {
		return grid2DDimensions;
	}

	/**
	 * Sets the Dimensions property for Grid 2D.
	 * The size of each dimension.
	 * @param _grid2DDimensions the new Dimensions value
	 */

	public void setGrid2DDimensions(int[] _grid2DDimensions) {
		grid2DDimensions = _grid2DDimensions;
	}
	/**
	 * Gets the Width property for Grid 2D.
	 * @return The horizontal extent of the space.
	 */

	public int getGrid2DWidth() {
		return grid2DDimensions[0];
	}

	/**
	 * Sets the Width property for Grid 2D.
	 * The horizontal extent of the space.
	 * @param _grid2DWidth the new Width value
	 */

	public void setGrid2DWidth(int _grid2DWidth) {
		grid2DDimensions[0] = _grid2DWidth;
	}
	/**
	 * Gets the Height property for Grid 2D.
	 * @return The vertical extent of the space.
	 */

	public int getGrid2DHeight() {
		return grid2DDimensions[1];
	}

	/**
	 * Sets the Height property for Grid 2D.
	 * The vertical extent of the space.
	 * @param _grid2DHeight the new Height value
	 */

	public void setGrid2DHeight(int _grid2DHeight) {
		grid2DDimensions[1] = _grid2DHeight;
	}
	/**
	 * Gets the Grid 2D property for Spatial Model.
	 * @return 
	 */

	public org.ascape.model.Scape getGrid2D() {
		return grid2D;
	}

	/**
	 * Sets the Grid 2D property for Spatial Model.
	 * 
	 * @param _grid2D the new Grid 2D value
	 */

	public void setGrid2D(org.ascape.model.Scape _grid2D) {
		grid2D = _grid2D;
	}
	/**
	 * Gets the Complex Net property for Spatial Model.
	 * @return 
	 */

	public org.ascape.model.Scape getComplexNet() {
		return complexNet;
	}

	/**
	 * Sets the Complex Net property for Spatial Model.
	 * 
	 * @param _complexNet the new Complex Net value
	 */

	public void setComplexNet(org.ascape.model.Scape _complexNet) {
		complexNet = _complexNet;
	}

	public String getName() {
		if (name == null) {
			return "Spatial Model " + uniqueID;
		} else {
			return name;
		}
	}
}
