package org.metaabm.gen.test;

/**
 * Basic Movement Agent Java Implementation.
 * 
 * Generated by metaabm system: May 13, 2009 11:53:46 AM PDT in project: org.metaabm.gen.ascape.test  (testing) */

import static org.junit.Assert.assertTrue;

public class BasicMovementAgent extends org.ascape.model.CellOccupant {

	/**
	 * 
	 */

	private int vision = 20;
	/**
	 * 
	 */

	private boolean movingTowardGoal = true;
	/**
	 * 
	 */

	private boolean success = false;
	/**
	 * Constructs a new Basic Movement Agent.
	 */

	public BasicMovementAgent() {
		createUniqueID();
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			BasicMovementAgent clone = (BasicMovementAgent) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	public BasicMovementModel getBasicMovementModel() {
		return (BasicMovementModel) getScape().getRoot();
	}

	public java.util.List getNetwork() {
		return ((org.ascape.model.space.Graph) getBasicMovementModel()
				.getTestNetwork().getSpace()).getNeighborsFor(this);
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveToRandomAvailable() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveToRandomAvailable_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			BasicCell availableCell = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomAvailable();
			if (availableCell != null) {

				moveTo(availableCell);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveToRandomAvailable_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveToRandomNoAvailableCheck() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveToRandomNoAvailableCheck_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional basicMovementAgentCopyCopyCopyCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(
						Object basicMovementAgentCopyCopyCopyCell) {
					basicMovementAgentCopyCopyCopyCell = ((org.ascape.model.HostCell) basicMovementAgentCopyCopyCopyCell)
							.getOccupant();
					if (basicMovementAgentCopyCopyCopyCell instanceof BasicMovementAgent) {
						BasicMovementAgent basicMovementAgentCopyCopyCopy = (BasicMovementAgent) basicMovementAgentCopyCopyCopyCell;
						return true;
					} else {
						return false;
					}
				}
			};

			BasicMovementAgent basicMovementAgentCopyCopyCopy = null;
			org.ascape.model.space.Location basicMovementAgentCopyCopyCopyLocation = ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace())
					.findRandom(basicMovementAgentCopyCopyCopyCondition);
			if (basicMovementAgentCopyCopyCopyLocation != null) {
				basicMovementAgentCopyCopyCopy = (BasicMovementAgent) ((org.ascape.model.HostCell) basicMovementAgentCopyCopyCopyLocation)
						.getOccupant();
			}
			if (basicMovementAgentCopyCopyCopy != null) {

				moveTo(((org.ascape.model.CellOccupant) basicMovementAgentCopyCopyCopy)
						.getHostCell());

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveToRandomNoAvailableCheck_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveToNeighbor() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveToNeighbor_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			BasicCell neighboringSpace = null;
			org.ascape.model.space.Location neighboringSpaceLocation = ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomNeighbor(this);
			if (neighboringSpaceLocation != null) {
				neighboringSpace = (BasicCell) ((org.ascape.model.CellOccupant) neighboringSpaceLocation)
						.getHostCell();
			}
			if (neighboringSpace != null) {

				moveTo(neighboringSpace);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveToNeighbor_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveToAvailableNeighbor() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveToAvailableNeighbor_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			BasicCell basicMovementAgentCopy = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace())
					.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
							.getHostCell());
			if (basicMovementAgentCopy != null) {

				moveTo(basicMovementAgentCopy);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveToAvailableNeighbor_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveToNearestGoal() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveToNearestGoal_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		if (isMovingTowardGoal()) {

			{
				org.ascape.util.Conditional goalinAreaCondition = new org.ascape.util.Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;

					public boolean meetsCondition(Object goalinAreaCell) {
						goalinAreaCell = goalinAreaCell;
						if (goalinAreaCell instanceof BasicCell) {
							BasicCell goalinArea = (BasicCell) goalinAreaCell;
							return (goalinArea.isGoal2());
						} else {
							return false;
						}
					}
				};

				BasicCell goalinArea = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
						.getGrid().getSpace()).findNearest(
						((org.ascape.model.CellOccupant) this).getHostCell(),
						goalinAreaCondition, false, Double.MAX_VALUE);
				if (goalinArea != null) {

					moveTo(goalinArea);

				}

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveToNearestGoal_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveTowardNearestAgent() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveTowardNearestAgent_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional otherPersonCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object otherPersonCell) {
					otherPersonCell = ((org.ascape.model.HostCell) otherPersonCell)
							.getOccupant();
					if (otherPersonCell instanceof BasicMovementAgent) {
						BasicMovementAgent otherPerson = (BasicMovementAgent) otherPersonCell;
						return true;
					} else {
						return false;
					}
				}
			};

			BasicMovementAgent otherPerson = null;
			org.ascape.model.space.Location otherPersonLocation = ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					otherPersonCondition, false, Double.MAX_VALUE);
			if (otherPersonLocation != null) {
				otherPerson = (BasicMovementAgent) ((org.ascape.model.HostCell) otherPersonLocation)
						.getOccupant();
			}
			if (otherPerson != null) {

				moveToward(((org.ascape.model.CellOccupant) otherPerson)
						.getHostCell());

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveTowardNearestAgent_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveTowardNearestGoal() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveTowardNearestGoal_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional selectNearestTowardCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object selectNearestTowardCell) {
					selectNearestTowardCell = selectNearestTowardCell;
					if (selectNearestTowardCell instanceof BasicCell) {
						BasicCell selectNearestToward = (BasicCell) selectNearestTowardCell;
						return (selectNearestToward.isGoal2());
					} else {
						return false;
					}
				}
			};

			BasicCell selectNearestToward = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					selectNearestTowardCondition, false, Double.MAX_VALUE);
			if (selectNearestToward != null) {

				moveToward(selectNearestToward);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveTowardNearestGoal_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveWithEvaluate() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveWithEvaluate_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional actPerson1Condition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object actPerson1Cell) {
					if (actPerson1Cell instanceof BasicMovementAgent) {
						BasicMovementAgent actPerson1 = (BasicMovementAgent) actPerson1Cell;
						return true;
					} else {
						return false;
					}
				}
			};

			BasicMovementAgent actPerson1 = (BasicMovementAgent) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomNeighbor(this,
					actPerson1Condition);
			if (actPerson1 != null) {

				moveTo(((org.ascape.model.CellOccupant) actPerson1)
						.getHostCell());

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveWithEvaluate_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveTwice() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveTwice_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		if (isMovingTowardGoal()) {

			{
				org.ascape.util.Conditional goalinArea2Condition = new org.ascape.util.Conditional() {
					private static final long serialVersionUID = 6846144446402098985L;

					public boolean meetsCondition(Object goalinArea2Cell) {
						goalinArea2Cell = goalinArea2Cell;
						if (goalinArea2Cell instanceof BasicCell) {
							BasicCell goalinArea2 = (BasicCell) goalinArea2Cell;
							return (goalinArea2.isGoal());
						} else {
							return false;
						}
					}
				};

				BasicCell goalinArea2 = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
						.getGrid().getSpace()).findNearest(
						((org.ascape.model.CellOccupant) this).getHostCell(),
						goalinArea2Condition, false, Double.MAX_VALUE);
				if (goalinArea2 != null) {

					{
						org.ascape.util.Conditional closestNearGoalCondition = new org.ascape.util.Conditional() {
							private static final long serialVersionUID = 6846144446402098985L;

							public boolean meetsCondition(
									Object closestNearGoalCell) {
								if (closestNearGoalCell instanceof BasicCell) {
									BasicCell closestNearGoal = (BasicCell) closestNearGoalCell;
									return (closestNearGoal.isGoal2());
								} else {
									return false;
								}
							}
						};

						BasicCell closestNearGoal = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
								.getGrid().getSpace()).findNearest(goalinArea2,
								closestNearGoalCondition, false,
								Double.MAX_VALUE);
						if (closestNearGoal != null) {

							moveTo(closestNearGoal);

						}

					}

				}

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveTwice_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void andWithOrGoal() {

		/*PROTECTED REGION ID(BasicMovementAgent_andWithOrGoal_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional andOrAgentCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object andOrAgentCell) {
					andOrAgentCell = andOrAgentCell;
					if (andOrAgentCell instanceof BasicCell) {
						BasicCell andOrAgent = (BasicCell) andOrAgentCell;
						return (andOrAgent.isGoal2() && andOrAgent.isGoal());
					} else {
						return false;
					}
				}
			};

			BasicCell andOrAgent = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					andOrAgentCondition, false, Double.MAX_VALUE);
			if (andOrAgent != null) {

				moveTo(andOrAgent);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_andWithOrGoal_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void andWithAndGoal() {

		/*PROTECTED REGION ID(BasicMovementAgent_andWithAndGoal_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional andAndAgentCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object andAndAgentCell) {
					andAndAgentCell = andAndAgentCell;
					if (andAndAgentCell instanceof BasicCell) {
						BasicCell andAndAgent = (BasicCell) andAndAgentCell;
						return (andAndAgent.isGoal2() && andAndAgent.isGoal());
					} else {
						return false;
					}
				}
			};

			BasicCell andAndAgent = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					andAndAgentCondition, false, Double.MAX_VALUE);
			if (andAndAgent != null) {

				moveTo(andAndAgent);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_andWithAndGoal_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void moveToGoalWithin() {

		/*PROTECTED REGION ID(BasicMovementAgent_moveToGoalWithin_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional areaWithGoalCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object areaWithGoalCell) {
					areaWithGoalCell = areaWithGoalCell;
					if (areaWithGoalCell instanceof BasicCell) {
						BasicCell areaWithGoal = (BasicCell) areaWithGoalCell;
						return (areaWithGoal.isGoal());
					} else {
						return false;
					}
				}
			};

			BasicCell areaWithGoal = (BasicCell) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomWithin(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					areaWithGoalCondition, false, getVision());
			if (areaWithGoal != null) {

				moveTo(areaWithGoal);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_moveToGoalWithin_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void setConditionNeighbor() {

		/*PROTECTED REGION ID(BasicMovementAgent_setConditionNeighbor_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional basicMovementAgentCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(Object basicMovementAgentCell) {
					if (basicMovementAgentCell instanceof BasicMovementAgent) {
						BasicMovementAgent basicMovementAgent = (BasicMovementAgent) basicMovementAgentCell;
						return (basicMovementAgent.isSuccess());
					} else {
						return false;
					}
				}
			};

			BasicMovementAgent basicMovementAgent = (BasicMovementAgent) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomNeighbor(this,
					basicMovementAgentCondition);
			if (basicMovementAgent != null) {

				basicMovementAgent.setSuccess(true);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_setConditionNeighbor_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void setConditionStateAgentNeighbor() {

		/*PROTECTED REGION ID(BasicMovementAgent_setConditionStateAgentNeighbor_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional setStateConditionNeighborCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(
						Object setStateConditionNeighborCell) {
					setStateConditionNeighborCell = ((org.ascape.model.HostCell) setStateConditionNeighborCell)
							.getOccupant();
					if (setStateConditionNeighborCell instanceof BasicMovementStateAgent) {
						BasicMovementStateAgent setStateConditionNeighbor = (BasicMovementStateAgent) setStateConditionNeighborCell;
						return (setStateConditionNeighbor.getState() == StateEnum.option1);
					} else {
						return false;
					}
				}
			};

			BasicMovementStateAgent setStateConditionNeighbor = null;
			org.ascape.model.space.Location setStateConditionNeighborLocation = ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomWithin(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					setStateConditionNeighborCondition, false, getVision());
			if (setStateConditionNeighborLocation != null) {
				setStateConditionNeighbor = (BasicMovementStateAgent) ((org.ascape.model.HostCell) setStateConditionNeighborLocation)
						.getOccupant();
			}
			if (setStateConditionNeighbor != null) {

				setStateConditionNeighbor.setState(StateEnum.option2);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_setConditionStateAgentNeighbor_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}

	/**
	 * .
	 */

	@org.junit.Test
	public void setRandomNeighborValue() {

		/*PROTECTED REGION ID(BasicMovementAgent_setRandomNeighborValue_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{
			org.ascape.util.Conditional basicMovementAgentCopyCopyCondition = new org.ascape.util.Conditional() {
				private static final long serialVersionUID = 6846144446402098985L;

				public boolean meetsCondition(
						Object basicMovementAgentCopyCopyCell) {
					if (basicMovementAgentCopyCopyCell instanceof BasicMovementAgent) {
						BasicMovementAgent basicMovementAgentCopyCopy = (BasicMovementAgent) basicMovementAgentCopyCopyCell;
						return true;
					} else {
						return false;
					}
				}
			};

			BasicMovementAgent basicMovementAgentCopyCopy = (BasicMovementAgent) ((org.ascape.model.space.Discrete) getBasicMovementModel()
					.getGrid().getSpace()).findRandomNeighbor(this,
					basicMovementAgentCopyCopyCondition);
			if (basicMovementAgentCopyCopy != null) {

				basicMovementAgentCopyCopy.setSuccess(true);

			}

		}

		/*PROTECTED REGION ID(BasicMovementAgent_setRandomNeighborValue_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}

	/**
	 * Gets the Vision property for Basic Movement Agent.
	 * @return 
	 */

	public int getVision() {
		return vision;
	}

	/**
	 * Sets the Vision property for Basic Movement Agent.
	 * 
	 * @param _vision the new Vision value
	 */

	public void setVision(int _vision) {
		vision = _vision;
	}
	/**
	 * Gets the Moving Toward Goal property for Basic Movement Agent.
	 * @return 
	 */

	public boolean isMovingTowardGoal() {
		return movingTowardGoal;
	}

	/**
	 * Sets the Moving Toward Goal property for Basic Movement Agent.
	 * 
	 * @param _movingTowardGoal the new Moving Toward Goal value
	 */

	public void setMovingTowardGoal(boolean _movingTowardGoal) {
		movingTowardGoal = _movingTowardGoal;
	}
	/**
	 * Gets the Success property for Basic Movement Agent.
	 * @return 
	 */

	public boolean isSuccess() {
		return success;
	}

	/**
	 * Sets the Success property for Basic Movement Agent.
	 * 
	 * @param _success the new Success value
	 */

	public void setSuccess(boolean _success) {
		success = _success;
	}

	public String getName() {
		if (name == null) {
			return "Basic Movement Agent " + uniqueID;
		} else {
			return name;
		}
	}
}
