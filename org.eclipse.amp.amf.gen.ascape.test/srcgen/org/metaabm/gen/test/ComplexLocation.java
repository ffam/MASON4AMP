package org.metaabm.gen.test;

/**
 * Complex Location Java Implementation.
 * 
 * Generated by metaabm system: May 13, 2009 11:53:45 AM PDT in project: org.metaabm.gen.ascape.test  (testing) */

import static org.junit.Assert.assertTrue;

public class ComplexLocation extends org.ascape.model.HostCell {

	/**
	 * 
	 */

	private boolean locationGood = false;
	/**
	 * Constructs a new Complex Location.
	 */

	public ComplexLocation() {
		createUniqueID();
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			ComplexLocation clone = (ComplexLocation) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	public SpatialModel getSpatialModel() {
		return (SpatialModel) getScape().getRoot();
	}

	public java.util.List getNetwork() {
		return ((org.ascape.model.space.Graph) getSpatialModel()
				.getComplexNet().getSpace()).getNeighborsFor(this);
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSelfAvailableCreate() {

		/*PROTECTED REGION ID(ComplexLocation_testSelfAvailableCreate_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			if (isAvailable()) {

				ComplexMovementAgent createAgents = (ComplexMovementAgent) getSpatialModel()
						.getComplexMovementAgent().getSpace()
						.newLocation(false);
				createAgents.moveTo(this);

			}

		}

		/*PROTECTED REGION ID(ComplexLocation_testSelfAvailableCreate_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSelfAvailableWithin() {

		/*PROTECTED REGION ID(ComplexLocation_testSelfAvailableWithin_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		if (isAvailable()
				&& withinBoundaries(getSpatialModel().getGoodBoundary())) {

		}

		if (isAvailable()
				&& withinBoundaries(getSpatialModel().getGoodBoundary())) {

			{

				if (isAvailable()
						&& withinBoundaries(getSpatialModel().getGoodBoundary())) {

					setLocationGood(true);

				}

			}
		}

		/*PROTECTED REGION ID(ComplexLocation_testSelfAvailableWithin_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testAgentHere() {

		/*PROTECTED REGION ID(ComplexLocation_testAgentHere_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			ComplexMovementAgent agent = null;
			org.ascape.model.space.Location agentLocation = this;
			if (agentLocation != null) {
				agent = (ComplexMovementAgent) ((org.ascape.model.HostCell) agentLocation)
						.getOccupant();
			}
			if (agent != null) {

				agent.setSomeBoolean(true);

			}

		}

		/*PROTECTED REGION ID(ComplexLocation_testAgentHere_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSelfAvailable() {

		/*PROTECTED REGION ID(ComplexLocation_testSelfAvailable_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			if (isAvailable()) {

				setLocationGood(true);

			}

		}

		/*PROTECTED REGION ID(ComplexLocation_testSelfAvailable_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testSelfWithinBounds() {

		/*PROTECTED REGION ID(ComplexLocation_testSelfWithinBounds_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		{

			if (withinBoundaries(getSpatialModel().getGoodBoundary())) {

				setLocationGood(true);

			}

		}

		/*PROTECTED REGION ID(ComplexLocation_testSelfWithinBounds_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}

	/**
	 * .
	 */

	@org.junit.Test
	public boolean withinBoundaries(double[] bounds) {

		org.ascape.model.space.Coordinate2DDiscrete coor = (org.ascape.model.space.Coordinate2DDiscrete) getCoordinate();
		return (coor.getYValue() >= bounds[0] && coor.getXValue() >= bounds[1]
				&& coor.getYValue() <= bounds[2] && coor.getXValue() <= bounds[3]);

	}

	/**
	 * Gets the Location Good property for Complex Location.
	 * @return 
	 */

	public boolean isLocationGood() {
		return locationGood;
	}

	/**
	 * Sets the Location Good property for Complex Location.
	 * 
	 * @param _locationGood the new Location Good value
	 */

	public void setLocationGood(boolean _locationGood) {
		locationGood = _locationGood;
	}

	public String getName() {
		if (name == null) {
			return "Complex Location " + uniqueID;
		} else {
			return name;
		}
	}
}
