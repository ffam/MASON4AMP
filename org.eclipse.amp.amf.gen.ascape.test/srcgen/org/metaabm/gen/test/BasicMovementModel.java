package org.metaabm.gen.test;

/**
 * Basic Movement Model Java Implementation.
 * Most recent version.
 * Generated by metaabm system: May 13, 2009 11:53:45 AM PDT in project: org.metaabm.gen.ascape.test  (testing) */

import static org.junit.Assert.assertTrue;

public class BasicMovementModel extends org.ascape.model.Scape {

	/**
	 * The number of areas to create.
	 */

	private int areaCount = 0;
	/**
	 * The number of network agents to create.
	 */

	private int networkAgentCount = 0;
	/**
	 * The number of generate act people to create.
	 */

	private int basicMovementAgentCount = 0;
	/**
	 * The number of complex space agents to create.
	 */

	private int complexSpaceAgentCount = 0;
	/**
	 * The number of act non movement persons to create.
	 */

	private int actNonMovementPersonCount = 0;
	/**
	 * The number of basic movement state agents to create.
	 */

	private int basicMovementStateAgentCount = 0;
	/**
	 * The size of each dimension.
	 */

	private int[] gridDimensions = new int[2];
	/**
	 * 
	 */

	private org.ascape.model.Scape grid = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape testNetwork = null;
	/**
	 * Constructs a new Basic Movement Model.
	 */

	public BasicMovementModel() {
		createUniqueID();
		setGridWidth(100);
		setGridHeight(50);
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes
	private static final long serialVersionUID = 89989998L;

	private String uniqueID;

	public String getUID() {
		return uniqueID;
	}

	public void createUniqueID() {
		uniqueID = org.apache.commons.lang.RandomStringUtils
				.randomAlphanumeric(5);
	}

	/**
	 * Clones the agent, ensuring that a unique id is assigned.
	 */
	public Object clone() {
		try {
			BasicMovementModel clone = (BasicMovementModel) super.clone();
			clone.createUniqueID();
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	@org.junit.Test
	public void dummy() {
		assertTrue(true);
	}

	/**
	 * 
	 */

	private org.ascape.model.Scape basicMovementAgentList = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape basicCellList = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape networkAgentList = null;
	/**
	 * 
	 */

	private org.ascape.model.Scape basicMovementStateAgentList = null;

	/**
	 * Gets the Basic Movement Agent property for Basic Movement Model.
	 * @return 
	 */

	public org.ascape.model.Scape getBasicMovementAgent() {
		return basicMovementAgentList;
	}

	/**
	 * Sets the Basic Movement Agent property for Basic Movement Model.
	 * 
	 * @param _basicMovementAgent the new Basic Movement Agent value
	 */

	public void setBasicMovementAgent(org.ascape.model.Scape _basicMovementAgent) {
		basicMovementAgentList = _basicMovementAgent;
	}
	/**
	 * Gets the Basic Cell property for Basic Movement Model.
	 * @return 
	 */

	public org.ascape.model.Scape getBasicCell() {
		return basicCellList;
	}

	/**
	 * Sets the Basic Cell property for Basic Movement Model.
	 * 
	 * @param _basicCell the new Basic Cell value
	 */

	public void setBasicCell(org.ascape.model.Scape _basicCell) {
		basicCellList = _basicCell;
	}
	/**
	 * Gets the Network Agent property for Basic Movement Model.
	 * @return 
	 */

	public org.ascape.model.Scape getNetworkAgent() {
		return networkAgentList;
	}

	/**
	 * Sets the Network Agent property for Basic Movement Model.
	 * 
	 * @param _networkAgent the new Network Agent value
	 */

	public void setNetworkAgent(org.ascape.model.Scape _networkAgent) {
		networkAgentList = _networkAgent;
	}
	/**
	 * Gets the Basic Movement State Agent property for Basic Movement Model.
	 * @return 
	 */

	public org.ascape.model.Scape getBasicMovementStateAgent() {
		return basicMovementStateAgentList;
	}

	/**
	 * Sets the Basic Movement State Agent property for Basic Movement Model.
	 * 
	 * @param _basicMovementStateAgent the new Basic Movement State Agent value
	 */

	public void setBasicMovementStateAgent(
			org.ascape.model.Scape _basicMovementStateAgent) {
		basicMovementStateAgentList = _basicMovementStateAgent;
	}

	/**
	 * Creates the members of Basic Movement Model. 
	 */
	public void createScape() {
		super.createScape();
		setName(toString());

		BasicMovementAgent basicMovementAgentProto = new BasicMovementAgent();
		basicMovementAgentList = new org.ascape.model.Scape();
		basicMovementAgentList.setName("Basic Movement Agent");
		basicMovementAgentList.setPrototypeAgent(basicMovementAgentProto);
		basicMovementAgentList
				.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		NetworkAgent networkAgentProto = new NetworkAgent();
		networkAgentList = new org.ascape.model.Scape();
		networkAgentList.setName("Network Agent");
		networkAgentList.setPrototypeAgent(networkAgentProto);
		networkAgentList.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		BasicMovementStateAgent basicMovementStateAgentProto = new BasicMovementStateAgent();
		basicMovementStateAgentList = new org.ascape.model.Scape();
		basicMovementStateAgentList.setName("Basic Movement State Agent");
		basicMovementStateAgentList
				.setPrototypeAgent(basicMovementStateAgentProto);
		basicMovementStateAgentList
				.setExecutionOrder(org.ascape.model.Scape.RULE_ORDER);

		grid = new org.ascape.model.Scape(
				new org.ascape.model.space.Array2DEuclidian());
		grid.setPrototypeAgent(new BasicCell());
		grid.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getGridDimensions()));
		grid.setName("Build Agents");
		((org.ascape.model.space.CollectionSpace) grid.getSpace())
				.setPeriodic(false);
		add(grid);
		org.ascape.model.Scape basicCellList = grid;
		testNetwork = new org.ascape.model.Scape(
				new org.ascape.model.space.Graph());
		testNetwork.setName("A Network Builder");
		add(testNetwork);

		add(basicMovementAgentList);

		add(networkAgentList);

		add(basicMovementStateAgentList);

		basicMovementAgentProto.setHostScape(grid);
		networkAgentProto.setHostScape(grid);
		grid.getRules().clear();

		basicMovementAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"Basic Movement Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		networkAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"Network Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		basicMovementStateAgentList
				.addStatCollector(new org.ascape.util.data.StatCollectorCSA(
						"Basic Movement State Agent Population") {
					private static final long serialVersionUID = 684614444640209893L;

					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move To Random Available") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveToRandomAvailable();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move To Random No Available Check") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveToRandomNoAvailableCheck();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move To Neighbor") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a).moveToNeighbor();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move To Available Neighbor") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveToAvailableNeighbor();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move To Nearest Goal") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveToNearestGoal();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move Toward Nearest Agent") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveTowardNearestAgent();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move Toward Nearest Goal") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveTowardNearestGoal();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move With Evaluate") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveWithEvaluate();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move Twice") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a).moveTwice();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"And With Or Goal") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a).andWithOrGoal();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"And With And Goal") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a).andWithAndGoal();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Move To Goal Within") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.moveToGoalWithin();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Set Condition Neighbor") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.setConditionNeighbor();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Set Condition State Agent Neighbor") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.setConditionStateAgentNeighbor();
			}
		});
		basicMovementAgentList.addRule(new org.ascape.model.rule.Rule(
				"Set Random Neighbor Value") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.BasicMovementAgent) a)
						.setRandomNeighborValue();
			}
		});
		networkAgentList.addRule(new org.ascape.model.rule.Rule(
				"Simple Network Move Toward Agent") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.NetworkAgent) a)
						.simpleNetworkMoveTowardAgent();
			}
		});
		networkAgentList.addRule(new org.ascape.model.rule.Rule("Disconnect") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.NetworkAgent) a).disconnect();
			}
		});
		networkAgentList.addRule(new org.ascape.model.rule.Rule("Replace") {
			private static final long serialVersionUID = 6846144446402098981L;
			public void execute(org.ascape.model.Agent a) {
				((org.metaabm.gen.test.NetworkAgent) a).replace();
			}
		});

	}

	/**
	 * Creates UI views for Basic Movement Model.
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		{
			org.ascape.view.vis.Overhead2DView gridView = new org.ascape.view.vis.Overhead2DView();
			gridView.setAgentSize(3);
			grid.addView(gridView);
			gridView.setDrawNetwork(true);
			gridView.getDrawSelection().setSelected(
					gridView.agents_oval_cells_draw_feature, false);
			gridView.getDrawSelection().setSelected(
					gridView.cells_fill_draw_feature, true);
			gridView.getDrawSelection().moveToFront(
					gridView.cells_fill_draw_feature);
		}
		{
			org.ascape.view.vis.ChartView chart = new org.ascape.view.vis.ChartView();
			addView(chart);
			if (getRunner().getEnvironment() instanceof org.ascape.runtime.applet.AppletEnvironment) {
				chart.getChart().getLegend().setAnchor(
						com.jrefinery.chart.Legend.SOUTH);
			}
			java.awt.Graphics dummyGraphics = new java.awt.image.BufferedImage(
					10, 10, java.awt.image.BufferedImage.TYPE_INT_RGB)
					.getGraphics();

			org.ascape.model.Scape basicMovementAgentScape = new BasicMovementModel();
			basicMovementAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			BasicMovementAgent basicMovementAgent = new BasicMovementAgent() {
				public void requestUpdate() {
				}
			};
			basicMovementAgentScape.add(basicMovementAgent);

			org.ascape.model.HostCell basicMovementAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			basicMovementAgentHost
					.setOccupant((org.ascape.model.CellOccupant) basicMovementAgent);

			org.ascape.model.Scape basicCellScape = new BasicMovementModel();
			basicCellScape.setRunner(new org.ascape.runtime.NonGraphicRunner());
			BasicCell basicCell = new BasicCell() {
				public void requestUpdate() {
				}
			};
			basicCellScape.add(basicCell);

			org.ascape.model.Scape networkAgentScape = new BasicMovementModel();
			networkAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			NetworkAgent networkAgent = new NetworkAgent() {
				public void requestUpdate() {
				}
			};
			networkAgentScape.add(networkAgent);

			org.ascape.model.HostCell networkAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			networkAgentHost
					.setOccupant((org.ascape.model.CellOccupant) networkAgent);

			org.ascape.model.Scape basicMovementStateAgentScape = new BasicMovementModel();
			basicMovementStateAgentScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			BasicMovementStateAgent basicMovementStateAgent = new BasicMovementStateAgent() {
				public void requestUpdate() {
				}
			};
			basicMovementStateAgentScape.add(basicMovementStateAgent);

			org.ascape.model.HostCell basicMovementStateAgentHost = new org.ascape.model.HostCell() {
				public void requestUpdate() {
				}
			};
			basicMovementStateAgentHost
					.setOccupant((org.ascape.model.CellOccupant) basicMovementStateAgent);

		}
	}

	public void scapeSetup(org.ascape.model.event.ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		networkAgentList.setSize(networkAgentCount);
		basicMovementAgentList.setSize(basicMovementAgentCount);
		basicMovementStateAgentList.setSize(basicMovementStateAgentCount);
	}

	public static void main(String[] args) {
		(new org.ascape.runtime.swing.SwingRunner()).open(
				"org.eclipse.amp.amf.gen.test.BasicMovementModel", args);
	}

	public java.awt.Color getColor() {
		return java.awt.Color.LIGHT_GRAY;
	}
	/**
	 * .
	 */

	@org.junit.Test
	public void testFake() {

		/*PROTECTED REGION ID(BasicMovementModel_testFake_Pre) ENABLED START*/
		//Pre-Conditions Here
		/*PROTECTED REGION END*/

		assertTrue(true);

		/*PROTECTED REGION ID(BasicMovementModel_testFake_Post) ENABLED START*/
		//Post-Conditions Here
		/*PROTECTED REGION END*/

	}
	/**
	 * Gets the Area Count property for Basic Movement Model.
	 * @return The number of areas to create.
	 */

	public int getAreaCount() {
		return areaCount;
	}

	/**
	 * Sets the Area Count property for Basic Movement Model.
	 * The number of areas to create.
	 * @param _areaCount the new Area Count value
	 */

	public void setAreaCount(int _areaCount) {
		areaCount = _areaCount;
	}
	/**
	 * Gets the Network Agent Count property for Basic Movement Model.
	 * @return The number of network agents to create.
	 */

	public int getNetworkAgentCount() {
		return networkAgentCount;
	}

	/**
	 * Sets the Network Agent Count property for Basic Movement Model.
	 * The number of network agents to create.
	 * @param _networkAgentCount the new Network Agent Count value
	 */

	public void setNetworkAgentCount(int _networkAgentCount) {
		networkAgentCount = _networkAgentCount;
	}
	/**
	 * Gets the Basic Movement Agent Count property for Basic Movement Model.
	 * @return The number of generate act people to create.
	 */

	public int getBasicMovementAgentCount() {
		return basicMovementAgentCount;
	}

	/**
	 * Sets the Basic Movement Agent Count property for Basic Movement Model.
	 * The number of generate act people to create.
	 * @param _basicMovementAgentCount the new Basic Movement Agent Count value
	 */

	public void setBasicMovementAgentCount(int _basicMovementAgentCount) {
		basicMovementAgentCount = _basicMovementAgentCount;
	}
	/**
	 * Gets the Complex Space Agent Count property for Basic Movement Model.
	 * @return The number of complex space agents to create.
	 */

	public int getComplexSpaceAgentCount() {
		return complexSpaceAgentCount;
	}

	/**
	 * Sets the Complex Space Agent Count property for Basic Movement Model.
	 * The number of complex space agents to create.
	 * @param _complexSpaceAgentCount the new Complex Space Agent Count value
	 */

	public void setComplexSpaceAgentCount(int _complexSpaceAgentCount) {
		complexSpaceAgentCount = _complexSpaceAgentCount;
	}
	/**
	 * Gets the Act Non Movement Person Count property for Basic Movement Model.
	 * @return The number of act non movement persons to create.
	 */

	public int getActNonMovementPersonCount() {
		return actNonMovementPersonCount;
	}

	/**
	 * Sets the Act Non Movement Person Count property for Basic Movement Model.
	 * The number of act non movement persons to create.
	 * @param _actNonMovementPersonCount the new Act Non Movement Person Count value
	 */

	public void setActNonMovementPersonCount(int _actNonMovementPersonCount) {
		actNonMovementPersonCount = _actNonMovementPersonCount;
	}
	/**
	 * Gets the Basic Movement State Agent Count property for Basic Movement Model.
	 * @return The number of basic movement state agents to create.
	 */

	public int getBasicMovementStateAgentCount() {
		return basicMovementStateAgentCount;
	}

	/**
	 * Sets the Basic Movement State Agent Count property for Basic Movement Model.
	 * The number of basic movement state agents to create.
	 * @param _basicMovementStateAgentCount the new Basic Movement State Agent Count value
	 */

	public void setBasicMovementStateAgentCount(
			int _basicMovementStateAgentCount) {
		basicMovementStateAgentCount = _basicMovementStateAgentCount;
	}
	/**
	 * Gets the Dimensions property for Grid.
	 * @return The size of each dimension.
	 */

	public int[] getGridDimensions() {
		return gridDimensions;
	}

	/**
	 * Sets the Dimensions property for Grid.
	 * The size of each dimension.
	 * @param _gridDimensions the new Dimensions value
	 */

	public void setGridDimensions(int[] _gridDimensions) {
		gridDimensions = _gridDimensions;
	}
	/**
	 * Gets the Width property for Grid.
	 * @return The horizontal extent of the space.
	 */

	public int getGridWidth() {
		return gridDimensions[0];
	}

	/**
	 * Sets the Width property for Grid.
	 * The horizontal extent of the space.
	 * @param _gridWidth the new Width value
	 */

	public void setGridWidth(int _gridWidth) {
		gridDimensions[0] = _gridWidth;
	}
	/**
	 * Gets the Height property for Grid.
	 * @return The vertical extent of the space.
	 */

	public int getGridHeight() {
		return gridDimensions[1];
	}

	/**
	 * Sets the Height property for Grid.
	 * The vertical extent of the space.
	 * @param _gridHeight the new Height value
	 */

	public void setGridHeight(int _gridHeight) {
		gridDimensions[1] = _gridHeight;
	}
	/**
	 * Gets the Grid property for Basic Movement Model.
	 * @return 
	 */

	public org.ascape.model.Scape getGrid() {
		return grid;
	}

	/**
	 * Sets the Grid property for Basic Movement Model.
	 * 
	 * @param _grid the new Grid value
	 */

	public void setGrid(org.ascape.model.Scape _grid) {
		grid = _grid;
	}
	/**
	 * Gets the Test Network property for Basic Movement Model.
	 * @return 
	 */

	public org.ascape.model.Scape getTestNetwork() {
		return testNetwork;
	}

	/**
	 * Sets the Test Network property for Basic Movement Model.
	 * 
	 * @param _testNetwork the new Test Network value
	 */

	public void setTestNetwork(org.ascape.model.Scape _testNetwork) {
		testNetwork = _testNetwork;
	}

	public String getName() {
		if (name == null) {
			return "Basic Movement Model " + uniqueID;
		} else {
			return name;
		}
	}
}
