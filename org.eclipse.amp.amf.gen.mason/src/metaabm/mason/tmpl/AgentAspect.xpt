«IMPORT emf»
«IMPORT metaabm»
«IMPORT metaabm::act»
«IMPORT metaabm::function»

«EXTENSION metaabm::tmpl::types»
«EXTENSION metaabm::tmpl::names» 
«EXTENSION metaabm::tmpl::infer»
«EXTENSION metaabm::tmpl::util»
«EXTENSION metaabm::tmpl::projections»


«DEFINE AgentBodyConstructor FOR SAgent-»
	«IF parent != null»
	private MersenneTwisterFast random;
	
	public «implementation.className»(SimState state){
		this.random = state.random;
		«parent.implementation.className.toFirstLower()» = («parent.implementation.className»)  state;
		
		«FOREACH acts() AS act-»
				«IF act.label.matches("Initialize")-»
					intializeNonFramework();
				«ENDIF-»
		«ENDFOREACH-»
	}
	
	public «implementation.className»(){
		«FOREACH acts() AS act-»
				«IF act.label.matches("Initialize")-»
					intializeNonFramework();
				«ENDIF-»
		«ENDFOREACH-»
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE Step FOR SAgent-»
	«IF parent != null»
	/*
	* add Rule stepMethod to «implementation.className»'s actions 
	* if you want that the simulation does something
	*/
	public void step(SimState state)
        {
        «parent.implementation.className.toFirstLower()» = («parent.implementation.className»)state;
		stepMethod();
	}
	«ENDIF»
«ENDDEFINE»

«DEFINE AgentBody FOR SAgent-»
	
	«IF parent != null»
		public «parent.implementation.className» «parent.implementation.className.toFirstLower()»;
	
		public «parent.implementation.className» get«parent.implementation.className»(){
			return «parent.implementation.className.toFirstLower()»;
		}
	«ENDIF-»
«ENDDEFINE»




«DEFINE NameAccessor FOR SAgent-»
	«EXPAND metaabm::mason::tmpl::JavaMason::GenerateComment»
    
«ENDDEFINE»



«DEFINE EndQuerySingle (List[metaabm::act::AAct] path, Boolean inner) FOR ANone-»
«ENDDEFINE»

«DEFINE BeginSerial(List[AAct] path, Boolean inner) FOR AControl-»
    «IF selector().isRoot() && selector().agent.isHost() && !controlFunctions({"available", "withinBoundaries"}).isEmpty-»
        if («EXPAND metaabm::mason::tmpl::JavaMason::FunctionInnerBlock(path, false) FOREACH controlFunctions({"available", "withinBoundaries"}) SEPARATOR "&&"-») {
    «ENDIF-»«ENDDEFINE»
«DEFINE EndSerial(List[AAct] path, Boolean inner) FOR AControl-»
    «IF selector().isRoot() && selector().agent.isHost() && !controlFunctions({"available", "withinBoundaries"}).isEmpty-»}
    «ENDIF-»
«ENDDEFINE»


	
«REM»«AROUND metaabm::mason::tmpl::JavaMason::Evaluation(*) FOR Object»«LET timesec() AS start»«targetDef.proceed()»//«timelapse(start)»«ENDLET»«ENDAROUND»«ENDREM»
