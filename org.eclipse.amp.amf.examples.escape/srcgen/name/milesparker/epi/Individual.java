package name.milesparker.epi;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;

/**
 * <!-- begin-user-doc -->
 * Individual Java Implementation.
 * 
 * Generated by AMF for model: Epidemic.metaabm in project: org.eclipse.amp.amf.examples.escape 
 * <!-- end-user-doc -->
 * @generated
 */
public class Individual {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private StatusEnum status = StatusEnum.susceptible;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int exposureEndPeriod = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int asymptomaticEndPeriod = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int outcomePeriod = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double contactTransmissionProbability = 0.0;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private List<IAgentChild> children;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Individual.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Individual() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Individual clone = (Individual) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initialize Location Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeLocation() {
		/*
		Spatial Functions:
		[available]
		 */
		Object cityLocation = new Object();
	}
	/**
	 * <!-- begin-user-doc -->
	 * Movement Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void movement() {
		double movementDraw = randomUnit();
		if ((getStatus() != StatusEnum.dead
				&& movementDraw < getEpidemic().getMovementProbability()
				&& getStatus() != StatusEnum.symptomInfectious && movementDraw < getEpidemic()
				.getMovementProbability())) { /*
												Spatial Functions:
												[available, neighbor]
												 */
			Object neighboringLocation = new Object();
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		double infectionDraw = randomUnit();
		double individualTransmissionRate = randomInRange(getEpidemic()
				.getMinContactTransmissionProbability(), getEpidemic()
				.getMaxContactTransmissionProbability());
		if (infectionDraw < getEpidemic().getInitialInfectionProbability()) {
			setStatus(StatusEnum.exposed);
		}
		setContactTransmissionProbability(individualTransmissionRate);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Transmission Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void transmission() {
		if ((getStatus() == StatusEnum.symptomInfectious || getStatus() == StatusEnum.asymptomInfectious)) { /*
																												Spatial Functions:
																												[neighbor]
																												 */
			Individual potentialExposure = new Individual();
			if (potentialExposure.getStatus() == StatusEnum.susceptible) {
				double transmissionDraw = randomUnit();
				if (transmissionDraw < potentialExposure
						.getContactTransmissionProbability()) {
					potentialExposure.setStatus(StatusEnum.exposed);
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Progression Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void progression() {
		int currentPeriod = timeNow();
		if ((getExposureEndPeriod() != getAsymptomaticEndPeriod() && currentPeriod == getExposureEndPeriod())) {
			setStatus(StatusEnum.asymptomInfectious);
		}
		if (currentPeriod == getOutcomePeriod()) {
			double mortalityDraw = randomUnit();
			if (mortalityDraw < getEpidemic().getCaseMortalityRate()) {
				setStatus(StatusEnum.dead);
			}
			if (!(mortalityDraw < getEpidemic().getCaseMortalityRate())) {
				setStatus(StatusEnum.recovered);
			}
		}
		if ((currentPeriod == getExposureEndPeriod() && getExposureEndPeriod() == getAsymptomaticEndPeriod())) {
			setStatus(StatusEnum.symptomInfectious);
		}
		if ((currentPeriod == getAsymptomaticEndPeriod() && getExposureEndPeriod() != getAsymptomaticEndPeriod())) {
			setStatus(StatusEnum.symptomInfectious);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Watch for changes in Status.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void exposure() {
		if (getStatus() == StatusEnum.exposed) {
			int exposureNow = timeNow();
			int exposureLength = randomInRange(getEpidemic()
					.getMinPeriodExposure(), getEpidemic()
					.getMaxPeriodExposure());
			int endExposure = exposureNow + exposureLength;
			setExposureEndPeriod(endExposure);
			int asymptomaticLength = randomInRange(getEpidemic()
					.getMinPeriodAsymptomInfection(), getEpidemic()
					.getMaxPeriodAsymptomInfection());
			int endAsymptomatic = endExposure + asymptomaticLength;
			setAsymptomaticEndPeriod(endAsymptomatic);
			int symptomLength = randomInRange(getEpidemic()
					.getMinPeriodSymptomInfection(), getEpidemic()
					.getMaxPeriodSymptomInfection());
			int endInfection = endAsymptomatic + symptomLength;
			setOutcomePeriod(endInfection);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Status property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StatusEnum getStatus() {
		return status;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Status property for Individual.
	 * 
	 * @param _status the new Status value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setStatus(StatusEnum _status) {
		status = _status;
		exposure();
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Exposure End Period property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getExposureEndPeriod() {
		return exposureEndPeriod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Exposure End Period property for Individual.
	 * 
	 * @param _exposureEndPeriod the new Exposure End Period value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setExposureEndPeriod(int _exposureEndPeriod) {
		exposureEndPeriod = _exposureEndPeriod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Asymptomatic End Period property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getAsymptomaticEndPeriod() {
		return asymptomaticEndPeriod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Asymptomatic End Period property for Individual.
	 * 
	 * @param _asymptomaticEndPeriod the new Asymptomatic End Period value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAsymptomaticEndPeriod(int _asymptomaticEndPeriod) {
		asymptomaticEndPeriod = _asymptomaticEndPeriod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Outcome Period property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getOutcomePeriod() {
		return outcomePeriod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Outcome Period property for Individual.
	 * 
	 * @param _outcomePeriod the new Outcome Period value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOutcomePeriod(int _outcomePeriod) {
		outcomePeriod = _outcomePeriod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Contact Transmission Probability property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getContactTransmissionProbability() {
		return contactTransmissionProbability;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Contact Transmission Probability property for Individual.
	 * 
	 * @param _contactTransmissionProbability the new Contact Transmission Probability value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setContactTransmissionProbability(
			double _contactTransmissionProbability) {
		contactTransmissionProbability = _contactTransmissionProbability;
	}

}
