/*
* generated by Xtext
*/
grammar InternalAPar;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.amp.amf.parameters.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.amp.amf.parameters.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.amp.amf.parameters.services.AParGrammarAccess;

}

@parser::members {

 	private AParGrammarAccess grammarAccess;
 	
    public InternalAParParser(TokenStream input, AParGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AParGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getModelAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)?	otherlv_1='model' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getModelKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getModelImportParserRuleCall_2_0()); 
	    }
		lv_model_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='incorporates' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getIncorporatesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getIncorporatesIncorporatesParserRuleCall_3_1_0()); 
	    }
		lv_incorporates_4_0=ruleIncorporates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"incorporates",
        		lv_incorporates_4_0, 
        		"Incorporates");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getParametersParameterParserRuleCall_4_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_importURI_0_0=RULE_STRING
		{
			newLeafNode(lv_importURI_0_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIncorporates
entryRuleIncorporates returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncorporatesRule()); }
	 iv_ruleIncorporates=ruleIncorporates 
	 { $current=$iv_ruleIncorporates.current; } 
	 EOF 
;

// Rule Incorporates
ruleIncorporates returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_importURI_0_0=RULE_STRING
		{
			newLeafNode(lv_importURI_0_0, grammarAccess.getIncorporatesAccess().getImportURISTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncorporatesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getSingleParameterParserRuleCall_0()); 
    }
    this_SingleParameter_0=ruleSingleParameter
    { 
        $current = $this_SingleParameter_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getSweepParameterParserRuleCall_1()); 
    }
    this_SweepParameter_1=ruleSweepParameter
    { 
        $current = $this_SweepParameter_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getSweepLinkParserRuleCall_2()); 
    }
    this_SweepLink_2=ruleSweepLink
    { 
        $current = $this_SweepLink_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSingleParameter
entryRuleSingleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleParameterRule()); }
	 iv_ruleSingleParameter=ruleSingleParameter 
	 { $current=$iv_ruleSingleParameter.current; } 
	 EOF 
;

// Rule SingleParameter
ruleSingleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleParameterRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSingleParameterAccess().getAttributeSAttributeCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSingleParameterAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleParameterAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSweepParameter
entryRuleSweepParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSweepParameterRule()); }
	 iv_ruleSweepParameter=ruleSweepParameter 
	 { $current=$iv_ruleSweepParameter.current; } 
	 EOF 
;

// Rule SweepParameter
ruleSweepParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSweepParameterRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSweepParameterAccess().getAttributeSAttributeCrossReference_0_0()); 
	}

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSweepParameterAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSweepParameterAccess().getStartValueValueParserRuleCall_2_0()); 
	    }
		lv_startValue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSweepParameterRule());
	        }
       		set(
       			$current, 
       			"startValue",
        		lv_startValue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSweepParameterAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSweepParameterAccess().getEndValueValueParserRuleCall_4_0()); 
	    }
		lv_endValue_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSweepParameterRule());
	        }
       		set(
       			$current, 
       			"endValue",
        		lv_endValue_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSweepParameterAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSweepParameterAccess().getIncrementValueParserRuleCall_6_0()); 
	    }
		lv_increment_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSweepParameterRule());
	        }
       		set(
       			$current, 
       			"increment",
        		lv_increment_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSweepParameterAccess().getRightSquareBracketKeyword_7());
    }
)
;





// Entry rule entryRuleSweepLink
entryRuleSweepLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSweepLinkRule()); }
	 iv_ruleSweepLink=ruleSweepLink 
	 { $current=$iv_ruleSweepLink.current; } 
	 EOF 
;

// Rule SweepLink
ruleSweepLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSweepLinkAccess().getSweepLinkAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSweepLinkAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSweepLinkAccess().getParametersParameterParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSweepLinkRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSweepLinkAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_1()); 
    }
    this_StringValue_1=ruleStringValue
    { 
        $current = $this_StringValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getRealValueParserRuleCall_2()); 
    }
    this_RealValue_2=ruleRealValue
    { 
        $current = $this_RealValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_3()); 
    }
    this_BooleanValue_3=ruleBooleanValue
    { 
        $current = $this_BooleanValue_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INTEGER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTEGERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INTEGER");
	    }

)
)
;





// Entry rule entryRuleRealValue
entryRuleRealValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealValueRule()); }
	 iv_ruleRealValue=ruleRealValue 
	 { $current=$iv_ruleRealValue.current; } 
	 EOF 
;

// Rule RealValue
ruleRealValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_REAL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getRealValueAccess().getValueREALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"REAL");
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanValueAccess().getValueBOOLEANEnumRuleCall_0()); 
	    }
		lv_value_0_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Rule BOOLEAN
ruleBOOLEAN returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='true' 
	{
        $current = grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='false' 
	{
        $current = grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1()); 
    }
));



RULE_INTEGER : '-'? ('0'..'9')+;

RULE_REAL : '-'? ('0'..'9')* '.' ('0'..'9')*;

RULE_DESC_STRING : '\u00AB' ('\\' ('b'|'t'|'n'|'f'|'r'|'\u00AB'|'\u00BB'|'\\')|~(('\\'|'\u00AB'|'\u00BB')))* '\u00BB';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


