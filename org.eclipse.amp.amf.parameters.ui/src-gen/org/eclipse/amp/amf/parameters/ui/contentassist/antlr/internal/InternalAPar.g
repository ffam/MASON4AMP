/*
* generated by Xtext
*/
grammar InternalAPar;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.amp.amf.parameters.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.amp.amf.parameters.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.amp.amf.parameters.services.AParGrammarAccess;

}

@parser::members {
 
 	private AParGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AParGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment()); }
(rule__Import__ImportURIAssignment)
{ after(grammarAccess.getImportAccess().getImportURIAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncorporates
entryRuleIncorporates 
:
{ before(grammarAccess.getIncorporatesRule()); }
	 ruleIncorporates
{ after(grammarAccess.getIncorporatesRule()); } 
	 EOF 
;

// Rule Incorporates
ruleIncorporates
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncorporatesAccess().getImportURIAssignment()); }
(rule__Incorporates__ImportURIAssignment)
{ after(grammarAccess.getIncorporatesAccess().getImportURIAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleParameter
entryRuleSingleParameter 
:
{ before(grammarAccess.getSingleParameterRule()); }
	 ruleSingleParameter
{ after(grammarAccess.getSingleParameterRule()); } 
	 EOF 
;

// Rule SingleParameter
ruleSingleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleParameterAccess().getGroup()); }
(rule__SingleParameter__Group__0)
{ after(grammarAccess.getSingleParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSweepParameter
entryRuleSweepParameter 
:
{ before(grammarAccess.getSweepParameterRule()); }
	 ruleSweepParameter
{ after(grammarAccess.getSweepParameterRule()); } 
	 EOF 
;

// Rule SweepParameter
ruleSweepParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSweepParameterAccess().getGroup()); }
(rule__SweepParameter__Group__0)
{ after(grammarAccess.getSweepParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSweepLink
entryRuleSweepLink 
:
{ before(grammarAccess.getSweepLinkRule()); }
	 ruleSweepLink
{ after(grammarAccess.getSweepLinkRule()); } 
	 EOF 
;

// Rule SweepLink
ruleSweepLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSweepLinkAccess().getGroup()); }
(rule__SweepLink__Group__0)
{ after(grammarAccess.getSweepLinkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealValue
entryRuleRealValue 
:
{ before(grammarAccess.getRealValueRule()); }
	 ruleRealValue
{ after(grammarAccess.getRealValueRule()); } 
	 EOF 
;

// Rule RealValue
ruleRealValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealValueAccess().getValueAssignment()); }
(rule__RealValue__ValueAssignment)
{ after(grammarAccess.getRealValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
(rule__StringValue__ValueAssignment)
{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BOOLEAN
ruleBOOLEAN
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getAlternatives()); }
(rule__BOOLEAN__Alternatives)
{ after(grammarAccess.getBOOLEANAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getSingleParameterParserRuleCall_0()); }
	ruleSingleParameter
{ after(grammarAccess.getParameterAccess().getSingleParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getSweepParameterParserRuleCall_1()); }
	ruleSweepParameter
{ after(grammarAccess.getParameterAccess().getSweepParameterParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getSweepLinkParserRuleCall_2()); }
	ruleSweepLink
{ after(grammarAccess.getParameterAccess().getSweepLinkParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getValueAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_1()); }
	ruleStringValue
{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getRealValueParserRuleCall_2()); }
	ruleRealValue
{ after(grammarAccess.getValueAccess().getRealValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_3()); }
	ruleBooleanValue
{ after(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0()); }
(	'true' 
)
{ after(grammarAccess.getBOOLEANAccess().getTRUEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1()); }
(	'false' 
)
{ after(grammarAccess.getBOOLEANAccess().getFALSEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameAssignment_0()); }
(rule__Model__NameAssignment_0)?
{ after(grammarAccess.getModelAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelKeyword_1()); }

	'model' 

{ after(grammarAccess.getModelAccess().getModelKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelAssignment_2()); }
(rule__Model__ModelAssignment_2)
{ after(grammarAccess.getModelAccess().getModelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_3()); }
(rule__Model__Group_3__0)*
{ after(grammarAccess.getModelAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getParametersAssignment_4()); }
(rule__Model__ParametersAssignment_4)*
{ after(grammarAccess.getModelAccess().getParametersAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Model__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3__0__Impl
	rule__Model__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getIncorporatesKeyword_3_0()); }

	'incorporates' 

{ after(grammarAccess.getModelAccess().getIncorporatesKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getIncorporatesAssignment_3_1()); }
(rule__Model__IncorporatesAssignment_3_1)
{ after(grammarAccess.getModelAccess().getIncorporatesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleParameter__Group__0__Impl
	rule__SingleParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleParameterAccess().getAttributeAssignment_0()); }
(rule__SingleParameter__AttributeAssignment_0)
{ after(grammarAccess.getSingleParameterAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleParameter__Group__1__Impl
	rule__SingleParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleParameterAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getSingleParameterAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleParameterAccess().getValueAssignment_2()); }
(rule__SingleParameter__ValueAssignment_2)
{ after(grammarAccess.getSingleParameterAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SweepParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__0__Impl
	rule__SweepParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getAttributeAssignment_0()); }
(rule__SweepParameter__AttributeAssignment_0)
{ after(grammarAccess.getSweepParameterAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__1__Impl
	rule__SweepParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getSweepParameterAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__2__Impl
	rule__SweepParameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getStartValueAssignment_2()); }
(rule__SweepParameter__StartValueAssignment_2)
{ after(grammarAccess.getSweepParameterAccess().getStartValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__3__Impl
	rule__SweepParameter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getSweepParameterAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__4__Impl
	rule__SweepParameter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getEndValueAssignment_4()); }
(rule__SweepParameter__EndValueAssignment_4)
{ after(grammarAccess.getSweepParameterAccess().getEndValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__5__Impl
	rule__SweepParameter__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getSweepParameterAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__6__Impl
	rule__SweepParameter__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getIncrementAssignment_6()); }
(rule__SweepParameter__IncrementAssignment_6)
{ after(grammarAccess.getSweepParameterAccess().getIncrementAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepParameter__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepParameter__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getRightSquareBracketKeyword_7()); }

	']' 

{ after(grammarAccess.getSweepParameterAccess().getRightSquareBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__SweepLink__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepLink__Group__0__Impl
	rule__SweepLink__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepLink__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepLinkAccess().getSweepLinkAction_0()); }
(

)
{ after(grammarAccess.getSweepLinkAccess().getSweepLinkAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepLink__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepLink__Group__1__Impl
	rule__SweepLink__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepLink__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepLinkAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getSweepLinkAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepLink__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepLink__Group__2__Impl
	rule__SweepLink__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepLink__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepLinkAccess().getParametersAssignment_2()); }
(rule__SweepLink__ParametersAssignment_2)*
{ after(grammarAccess.getSweepLinkAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SweepLink__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SweepLink__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SweepLink__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepLinkAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getSweepLinkAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getModelAccess().getNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ModelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelImportParserRuleCall_2_0()); }
	ruleImport{ after(grammarAccess.getModelAccess().getModelImportParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__IncorporatesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getIncorporatesIncorporatesParserRuleCall_3_1_0()); }
	ruleIncorporates{ after(grammarAccess.getModelAccess().getIncorporatesIncorporatesParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ParametersAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getParametersParameterParserRuleCall_4_0()); }
	ruleParameter{ after(grammarAccess.getModelAccess().getParametersParameterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Incorporates__ImportURIAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncorporatesAccess().getImportURISTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getIncorporatesAccess().getImportURISTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleParameter__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleParameterAccess().getAttributeSAttributeCrossReference_0_0()); }
(
{ before(grammarAccess.getSingleParameterAccess().getAttributeSAttributeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSingleParameterAccess().getAttributeSAttributeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSingleParameterAccess().getAttributeSAttributeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleParameter__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleParameterAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getSingleParameterAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getAttributeSAttributeCrossReference_0_0()); }
(
{ before(grammarAccess.getSweepParameterAccess().getAttributeSAttributeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSweepParameterAccess().getAttributeSAttributeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSweepParameterAccess().getAttributeSAttributeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__StartValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getStartValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getSweepParameterAccess().getStartValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__EndValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getEndValueValueParserRuleCall_4_0()); }
	ruleValue{ after(grammarAccess.getSweepParameterAccess().getEndValueValueParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SweepParameter__IncrementAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepParameterAccess().getIncrementValueParserRuleCall_6_0()); }
	ruleValue{ after(grammarAccess.getSweepParameterAccess().getIncrementValueParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SweepLink__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSweepLinkAccess().getParametersParameterParserRuleCall_2_0()); }
	ruleParameter{ after(grammarAccess.getSweepLinkAccess().getParametersParameterParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTEGERTerminalRuleCall_0()); }
	RULE_INTEGER{ after(grammarAccess.getIntValueAccess().getValueINTEGERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealValueAccess().getValueREALTerminalRuleCall_0()); }
	RULE_REAL{ after(grammarAccess.getRealValueAccess().getValueREALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBOOLEANEnumRuleCall_0()); }
	ruleBOOLEAN{ after(grammarAccess.getBooleanValueAccess().getValueBOOLEANEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INTEGER : '-'? ('0'..'9')+;

RULE_REAL : '-'? ('0'..'9')* '.' ('0'..'9')*;

RULE_DESC_STRING : '\u00AB' ('\\' ('b'|'t'|'n'|'f'|'r'|'\u00AB'|'\u00BB'|'\\')|~(('\\'|'\u00AB'|'\u00BB')))* '\u00BB';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


